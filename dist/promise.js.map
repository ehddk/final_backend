{"version":3,"file":"promise.js","sourceRoot":"","sources":["../src/promise.ts"],"names":[],"mappings":";;AAAA,iCAA4C;AAE5C,SAAS,WAAW,CAAC,SAAiB;IACpC,OAAO,IAAI,OAAO,CAGf,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrB,kEAAkE;QAClE,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC;YAC1C,MAAM,WAAW,GAAG,eAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC;YACzE,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,MAAM,CAAC,gBAAgB,CAAC,CAAC;gBACzB,OAAO;YACT,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;YAC1C,OAAO,CAAC,WAAW,CAAC,CAAC;QACvB,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACL,CAAC;AAED,mBAAmB;AACnB,KAAK,UAAU,eAAe,CAAC,SAAiB;IAC9C,MAAM,OAAO,GAAG,eAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC;IAErE,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,kBAAkB;IAClB,sCAAsC;IACtC,gEAAgE;IAChE,KAAK;IAEL,yBAAyB;IACzB,kDAAkD;IAClD,oEAAoE;IACpE,MAAM;IAEN,gCAAgC;IAChC,gEAAgE;IAChE,8CAA8C;IAE9C,OAAO;QACL,GAAG,OAAO;QACV,QAAQ,EAAR,eAAQ;KACT,CAAC;AACJ,CAAC;AACD,kBAAkB;AAClB,KAAK,UAAU,yBAAyB,CAAC,SAAiB;IACxD,MAAM,OAAO,GAAG,eAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC;IAErE,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,IAAI,QAAQ,GAAG,EAAE,CAAC;IAClB,KAAK,MAAM,SAAS,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;QACzC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACvB,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,SAAS,CAAC,CAAC;QAC7C,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACzB,CAAC;IAED,OAAO;QACL,GAAG,OAAO;QACV,QAAQ;KACT,CAAC;AACJ,CAAC;AAED,CAAC,KAAK,IAAI,EAAE;IACV,4BAA4B;IAC5B,MAAM,OAAO,GAAG,MAAM,eAAe,CAAC,GAAG,CAAC,CAAC;IAC3C,wDAAwD;IACxD,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;AACjC,CAAC,CAAC,EAAE,CAAC","sourcesContent":["import { students, teachers } from \"@/data\";\n\nfunction findStudent(studentId: number) {\n  return new Promise<{\n    id: number;\n    name: string;\n  }>((resolve, reject) => {\n    // setTimeout을 넣어준 이유는 실제 DB에서 조회해오는 상황을 가정학시위해서 조회시간이 1초라고 가정한 것.\n    setTimeout(() => {\n      console.log(\"학생 정보를 찾는 중입니다.\", studentId);\n      const findStudent = students.find((student) => student.id === studentId);\n      if (!findStudent) {\n        reject(\"존재하지 않는 학생입니다.\");\n        return;\n      }\n\n      console.log(\"학생 정보를 찾았습니다.\", findStudent);\n      resolve(findStudent);\n    }, 1000);\n  });\n}\n\n// 병렬적으로 학생을 조회해온다.\nasync function findTeacherInfo(teacherId: string) {\n  const teacher = teachers.find((teacher) => teacher.id === teacherId);\n\n  if (!teacher) {\n    throw new Error(\"존재하지 않는 선생님입니다.\");\n  }\n\n  // Promise.all 케이스\n  // const students = await Promise.all(\n  //   teacher.students.map((studentId) => findStudent(studentId))\n  // );\n\n  // Promise.allSettled 케이스\n  // const studentsData = await Promise.allSettled([\n  //   ...teacher.students.map((studentId) => findStudent(studentId)),\n  // ]);\n\n  // const students = studentsData\n  //   .filter((studentData) => studentData.status !== \"rejected\")\n  //   .map((studentData) => studentData.value);\n\n  return {\n    ...teacher,\n    students,\n  };\n}\n// 순차적으로 학생을 조회해온다\nasync function sequentialFindTeacherInfo(teacherId: string) {\n  const teacher = teachers.find((teacher) => teacher.id === teacherId);\n\n  if (!teacher) {\n    throw new Error(\"존재하지 않는 선생님입니다.\");\n  }\n\n  let students = [];\n  for (const studentId of teacher.students) {\n    console.log(studentId);\n    const student = await findStudent(studentId);\n    students.push(student);\n  }\n\n  return {\n    ...teacher,\n    students,\n  };\n}\n\n(async () => {\n  // 병호 선생님의 정보와 학생들의 정보를 불러오자\n  const teacher = await findTeacherInfo(\"a\");\n  // const teacher = await sequentialFindTeacherInfo(\"a\");\n  console.log(\"result\", teacher);\n})();\n"]}