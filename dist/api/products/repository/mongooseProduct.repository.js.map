{"version":3,"file":"mongooseProduct.repository.js","sourceRoot":"","sources":["../../../../src/api/products/repository/mongooseProduct.repository.ts"],"names":[],"mappings":";;;;;;AAAA,4DAAuD;AAGvD,4FAAmE;AAEnE,MAAa,yBAAyB;IAClC,KAAK,CAAC,OAAO;QACT,MAAM,QAAQ,GAAE,MAAM,gCAAe,CAAC,IAAI,EAAE,CAAC;QAC7C,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,SAAgB;QAC3B,MAAM,OAAO,GAAG,MAAM,gCAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC1D,OAAO,CAAC,GAAG,CAAC,aAAa,EAAC,OAAO,CAAC,CAAA;QAClC,OAAO,OAAO,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,OAA2B;QAClC,IAAI,CAAC;YACD,MAAM,UAAU,GAAG,IAAI,gCAAe,CAAC;gBACnC,GAAG,OAAO;aACb,CAAC,CAAC;YACH,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;YAC/B,OAAO,UAAU,CAAC;QACtB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;YAC9C,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;QACxD,CAAC;IACL,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,SAAgB,EAAC,cAAgC;QAC1D,MAAM,OAAO,GAAG,MAAM,gCAAe,CAAC,iBAAiB,CACnD,SAAS,EACT,cAAc,EACd,EAAC,GAAG,EAAE,IAAI,EAAC,CACd,CAAA;QACD,IAAG,CAAC,OAAO,EAAC,CAAC;YACT,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;QACxD,CAAC;QACD,OAAO,OAAO,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,SAAgB;QACzB,MAAM,gCAAe,CAAC,SAAS,CAAC,EAAC,GAAG,EAAC,SAAS,EAAC,CAAC,CAAA;QAChD,OAAO;IACX,CAAC;CACJ;AAzCD,8DAyCC","sourcesContent":["import {MongooseProduct} from '../model/product.schema'\nimport { IProduct } from '../@types/product.type'\nimport { ProductRepository } from './product.repository'\nimport HttpException from '../../common/exceptions/http.exception';\n\nexport class MongooseProductRepository implements ProductRepository{\n    async findAll():Promise<IProduct[]>{\n        const products= await MongooseProduct.find();\n        return products;\n    }\n\n    async findById(productId:string):Promise<IProduct | null>{\n        const product = await MongooseProduct.findById(productId);\n        console.log('productfind',product)\n        return product;\n    }\n\n    async save(product:Omit<IProduct,\"id\">):Promise<IProduct>{\n        try {\n            const newProduct = new MongooseProduct({\n                ...product,\n            });\n            await newProduct.save();\n            console.log('sdd', newProduct);\n            return newProduct;\n        } catch (error) {\n            console.error(\"Error saving product:\", error);\n            throw new HttpException(500, \"제품 저장 중 오류가 발생했습니다.\");\n        }\n    }\n    async update(productId:string,updatedProduct:Partial<IProduct>):Promise<IProduct>{\n        const results = await MongooseProduct.findByIdAndUpdate(\n            productId,\n            updatedProduct,\n            {new :true}\n        )\n        if(!results){\n            throw new HttpException(404, \"해당 제품을 수정 할 수 없습니다.\");\n        }\n        return results;\n    }\n\n    async delete(productId:string):Promise<void>{\n        await MongooseProduct.deleteOne({_id:productId})\n        return;\n    }\n}"]}