{"version":3,"file":"adminProduct.service.js","sourceRoot":"","sources":["../../../../src/api/products/service/adminProduct.service.ts"],"names":[],"mappings":";;;;;;AAAA,4FAAmE;AAMnE,MAAa,uBAAuB;IAEf,kBAAkB,CAAmB;IAC1D,YAAY,iBAAmC;QAC3C,IAAI,CAAC,kBAAkB,GAAC,iBAAiB,CAAC;IAC9C,CAAC;IACG,WAAW;IACX,KAAK,CAAC,aAAa,CAAC,OAA2B;QAC5C,IAAG,CAAC;YACH,sBAAsB;YACtB,gBAAgB;YAChB,iBAAiB;YACjB,KAAK;YACL,MAAM,UAAU,GAAC,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;gBAChD,GAAG,OAAO;gBACX,uBAAuB;aACzB,CAAC,CAAA;YACF,OAAO,UAAU,CAAA;QAElB,CAAC;QACD,OAAM,KAAK,EAAC,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACvC,CAAC;IACJ,CAAC;IACD,cAAc;IACd,KAAK,CAAC,WAAW;QACb,IAAG,CAAC;YACA,MAAM,QAAQ,GAAC,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;YACvD,OAAO,QAAQ,CAAC;YAClB,8BAA8B;QAChC,CAAC;QAAA,OAAM,KAAK,EAAC,CAAC;YACV,MAAO,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC9C,CAAC;IACL,CAAC;IACD,cAAc;IACd,KAAK,CAAC,gBAAgB,CAAC,SAAgB;QACnC,IAAG,CAAC;YACA,MAAM,OAAO,GAAC,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAChE,IAAG,CAAC,OAAO,EAAC,CAAC;gBACT,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAC,mBAAmB,CAAC,CAAA;YACpD,CAAC;YACD,gEAAgE;YAChE,OAAO,OAAO,IAAI,IAAI,CAAC;QAC3B,CAAC;QAAA,OAAM,KAAK,EAAC,CAAC;YACV,MAAO,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC9C,CAAC;IACL,CAAC;IACD,WAAW;IACX,KAAK,CAAC,aAAa,CAAC,SAAgB;QAChC,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA;IACnD,CAAC;IACD,WAAW;IACX,KAAK,CAAC,aAAa,CAAC,SAAgB,EAAC,aAAiC;QACpE,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,EAAC,aAAa,CAAC,CAAC;QAC7D,OAAO;IAEV,CAAC;CAEJ;AA1DD,0DA0DC","sourcesContent":["import HttpException from \"../../common/exceptions/http.exception\";\nimport { IProduct } from \"../@types/product.type\";\nimport { ProductResponseDTO } from \"../dto/productResponse.dto\"\nimport { ProductRepository } from \"../repository/product.repository\";\nimport { AdminProductService } from \"./adminProduct.service.type\"\n\nexport class AdminProductServiceImpl implements AdminProductService{\n\n    private readonly _productRepository:ProductRepository;\nconstructor(productRepository:ProductRepository){\n    this._productRepository=productRepository;\n}\n    /**제품 등록 */\n    async createProduct(product:Omit<IProduct,\"id\">):Promise<ProductResponseDTO>{\n       try{\n        // const newProduct ={\n        //     id:'123',\n        //     ...product\n        // };\n        const newProduct=await this._productRepository.save({\n            ...product,\n           // createdAt:new Date()\n        })\n        return newProduct\n       \n       } \n       catch(error){\n        throw new Error(`제품 생성 중 오류가 발생했습니다`);\n       }\n    }\n    /**제품 목록 조회 */\n    async getProducts():Promise<ProductResponseDTO[]>{\n        try{\n            const products=await this._productRepository.findAll();\n            return products;\n          //  return [...this.products];\n        }catch(error){\n            throw  new Error(`제품 목록 조회 중 오류가 발생했습니다`);\n        }\n    }\n    /**제품 상세 조회 */\n    async getProductDetail(productId:string):Promise<ProductResponseDTO | null>{\n        try{\n            const product=await this._productRepository.findById(productId);\n            if(!product){\n                throw new HttpException(404,\"해당 제품을 찾을 수 없습니다.\")\n            }\n            //const product=this.products.find(item=>item.id === productId);\n            return product || null;\n        }catch(error){\n            throw  new Error(`제품 상세 조회 중 오류가 발생했습니다`);\n        }\n    }\n    /**제품 삭제 */\n    async deleteProduct(productId:string):Promise<void>{\n        await this._productRepository.delete(productId)\n    }\n    /**제품 수정 */\n    async updateProduct(productId:string,updateProduct:Omit<IProduct,\"id\">):Promise<void>{\n      await this._productRepository.update(productId,updateProduct);\n       return;\n\n    }\n\n}"]}