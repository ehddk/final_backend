{"version":3,"file":"mongooseOrderItem.repository.js","sourceRoot":"","sources":["../../../../src/api/orders/repository/mongooseOrderItem.repository.ts"],"names":[],"mappings":";;;;;;AAAA,4FAAmE;AACnE,0EAAwE;AAGxE,wEAAsE;AAEtE,MAAa,2BAA2B;IACtC,KAAK,CAAC,IAAI,CAAC,SAAiC;QAC1C,MAAM,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;QACvC,MAAM,OAAO,GAAG,MAAM,gCAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC1D,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,iBAAiB,SAAS,YAAY,CAAC,CAAC;QAC1D,CAAC;QAED,MAAM,YAAY,GAAG,IAAI,oCAAiB,CAAC;YACzC,GAAG,SAAS;YACZ,OAAO,EAAE,OAAO;SACjB,CAAC,CAAC;QAEH,MAAM,YAAY,CAAC,IAAI,EAAE,CAAC;QAE1B,OAAO,YAAY,CAAC;IACtB,CAAC;IACD,KAAK,CAAC,OAAO;QACX,OAAO,MAAM,oCAAiB,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC5D,CAAC;IACD,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,MAAM,oCAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC;iBACnD,QAAQ,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;iBAC7B,IAAI,EAAE,CAAC;YACV,OAAO,SAAS,CAAC;QACnB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;YACzC,IAAI,OAAO,CAAC,QAAQ,CAAC,yBAAyB,CAAC,EAAE,CAAC;gBAChD,OAAO,IAAI,CAAC;YACd,CAAC;YAED,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IACD,KAAK,CAAC,MAAM,CACV,WAAmB,EACnB,mBAAwC;QAExC,MAAM,OAAO,GAAG,MAAM,oCAAiB,CAAC,iBAAiB,CACvD,WAAW,EACX,mBAAmB,CACpB,CAAC;QAEF,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;QACpD,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,WAAmB;QAC9B,MAAM,oCAAiB,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC,CAAC;QAExD,OAAO;IACT,CAAC;CACF;AAvDD,kEAuDC","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { MongooseOrderItem } from \"@/api/orders/model/orderItem.schema\";\nimport { OrderItemRepository } from \"@/api/orders/repository/orderItem.repository\";\nimport { MongooseOrder } from \"@/api/orders/model/order.schema\";\nimport { MongooseProduct } from \"@/api/products/model/product.schema\";\n\nexport class MongooseOrderItemRepository implements OrderItemRepository {\n  async save(orderItem: Omit<IOrderItem, \"id\">): Promise<IOrderItem> {\n    const productId = orderItem.product.id;\n    const product = await MongooseProduct.findById(productId);\n    if (!product) {\n      throw new Error(`Order with id ${productId} not found`);\n    }\n\n    const newOrderItem = new MongooseOrderItem({\n      ...orderItem,\n      product: product,\n    });\n\n    await newOrderItem.save();\n\n    return newOrderItem;\n  }\n  async findAll(): Promise<IOrderItem[]> {\n    return await MongooseOrderItem.find().populate(\"product\");\n  }\n  async findById(id: string): Promise<IOrderItem | null> {\n    try {\n      const orderItem = await MongooseOrderItem.findById(id)\n        .populate({ path: \"product\" })\n        .exec();\n      return orderItem;\n    } catch (error: any) {\n      const message = error.message.toString();\n      if (message.includes(\"Cast to ObjectId failed\")) {\n        return null;\n      }\n\n      throw error;\n    }\n  }\n  async update(\n    orderItemId: string,\n    updateOrderItemInfo: Partial<IOrderItem>\n  ): Promise<IOrderItem> {\n    const results = await MongooseOrderItem.findByIdAndUpdate(\n      orderItemId,\n      updateOrderItemInfo\n    );\n\n    if (!results) {\n      throw new HttpException(404, \"주문 상품을 찾을 수 없습니다.\");\n    }\n\n    return results;\n  }\n  async delete(orderItemId: string): Promise<void> {\n    await MongooseOrderItem.deleteOne({ _id: orderItemId });\n\n    return;\n  }\n}\n"]}