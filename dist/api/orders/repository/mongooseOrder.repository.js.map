{"version":3,"file":"mongooseOrder.repository.js","sourceRoot":"","sources":["../../../../src/api/orders/repository/mongooseOrder.repository.ts"],"names":[],"mappings":"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","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { OrderRepository } from \"@/api/orders/repository/order.repository\";\nimport { MongooseOrder } from \"@/api/orders/model/order.schema\";\n\nexport class MongooseOrderRepository implements OrderRepository {\n  async findAllWithPagination({\n    userId,\n    offset,\n    limit,\n  }: {\n    userId: string;\n    offset: number;\n    limit: number;\n  }): Promise<{\n    totalCount: number;\n    prev: string | null;\n    results: IOrder[];\n    next: string | null;\n  }> {\n    const offsetValue = Number(offset) || 0;\n    const limitValue = Number(limit) || 10;\n\n    // 주문 목록 조회 및 페이지네이션 적용\n    const list = await MongooseOrder.find({ userId })\n      .limit(limitValue)\n      .skip(offsetValue)\n      .populate({\n        path: \"orderItem\",\n        populate: {\n          path: \"product\",\n        },\n      })\n      .populate(\"userInfo\")\n      .sort({ createdAt: -1 });\n\n    console.log(\"list:\", list);\n\n    const totalCount = await MongooseOrder.find({ userId }).countDocuments();\n\n    return {\n      totalCount,\n      results: list,\n      prev:\n        offsetValue - limitValue >= 0\n          ? `?offset=${offsetValue - limitValue}&limit=${limitValue}`\n          : null,\n      next:\n        offsetValue + limitValue < totalCount\n          ? `?offset=${offsetValue + limitValue}&limit=${limitValue}`\n          : null,\n    };\n  }\n\n  async save(order: Omit<IOrder, \"id\">): Promise<IOrder> {\n    const newOrder = new MongooseOrder({\n      ...order,\n      userInfo: order.userInfo,\n    });\n\n    await newOrder.save();\n\n    return newOrder;\n  }\n\n  async findAll(userId: string): Promise<IOrder[]> {\n    const orders = await MongooseOrder.find({ userId })\n      .populate({\n        path: \"orderItem\",\n        populate: {\n          path: \"product\", // orderItem 안의 product를 populate\n        },\n      })\n      .populate(\"userInfo\");\n    console.log(\"orders:\", orders);\n    return orders;\n  }\n\n  async findById(orderId: string): Promise<IOrder | null> {\n    const order = await MongooseOrder.findById(orderId)\n      .populate({\n        path: \"orderItem\",\n        populate: {\n          path: \"product\", // orderItem 안의 product를 populate\n        },\n      })\n      .populate(\"userInfo\");\n    if (!order) {\n      throw new HttpException(404, \"주문을 찾을 수 없습니다.\");\n    }\n\n    return order;\n  }\n\n  async update(\n    orderId: string,\n    updateOrderInfo: Partial<IOrder>\n  ): Promise<IOrder> {\n    const updatedOrder = await MongooseOrder.findByIdAndUpdate(\n      orderId,\n      updateOrderInfo,\n      { new: true }\n    )\n      .populate({\n        path: \"orderItem\",\n        populate: {\n          path: \"product\", // orderItem 안의 product를 populate\n        },\n      })\n      .populate(\"userInfo\");\n\n    if (!updatedOrder) {\n      throw new HttpException(404, \"주문을 찾을 수 없습니다.\");\n    }\n\n    return updatedOrder;\n  }\n\n  async delete(orderId: string): Promise<void> {\n    await MongooseOrder.deleteOne({ _id: orderId });\n\n    return;\n  }\n}\n"]}