{"version":3,"file":"adminOrders.controller.js","sourceRoot":"","sources":["../../../../src/api/orders/controller/adminOrders.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport { OrdersService } from \"@/api/orders/service/orders.service.type\";\n\n// [관리자]\n// 주문 목록 조회 - getOrders\n// 주문 상세 조회 - getOrderDetail\n// 주문 생성 - createOrder\n// 주문 수정 - updateOrder\n// 주문 삭제 - deleteOrder\n\nexport default class AdminOrdersController {\n  private readonly _ordersService: OrdersService;\n\n  constructor(_ordersService: OrdersService) {\n    this._ordersService = _ordersService;\n\n    this.getOrders = this.getOrders.bind(this);\n    this.getOrderDetail = this.getOrderDetail.bind(this);\n    this.createOrder = this.createOrder.bind(this);\n    this.updateOrder = this.updateOrder.bind(this);\n    this.deleteOrder = this.deleteOrder.bind(this);\n  }\n\n  /** 주문 목록 조회 */\n  async getOrders(\n    req: Request<\n      adminGetOrdersRequest[\"path\"],\n      adminGetOrdersResponse,\n      adminGetOrdersRequest[\"body\"],\n      adminGetOrdersRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const userId = req.user.userId;\n    try {\n      const orders = await this._ordersService.getOrders({\n        userId,\n        limit: req.query.limit,\n        offset: req.query.offset,\n      });\n      res.send(orders);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  /** 주문 상세 조회 */\n  async getOrderDetail(\n    req: Request<\n      adminGetOrderDetailRequest[\"path\"],\n      adminGetOrderDetailResponse,\n      adminGetOrderDetailRequest[\"body\"],\n      adminGetOrderDetailRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    try {\n      const orderDetail = await this._ordersService.getOrderDetail(\n        req.params.orderId\n      );\n      res.send(orderDetail);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  /** 주문 생성 */\n  async createOrder(\n    req: Request<\n      adminCreateOrderRequest[\"path\"],\n      adminCreateOrderResponse,\n      adminCreateOrderRequest[\"body\"],\n      adminCreateOrderRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const {\n      deliveryAddress,\n      deliveryRequest,\n      paymentMethod,\n      orderItem,\n      orderStatus,\n      totalProductPrice,\n      shippingFee,\n      totalPaymentAmount,\n    } = req.body;\n\n    try {\n      const createdOrder = await this._ordersService.createOrder(\n        req.user.userId,\n        {\n          deliveryAddress,\n          deliveryRequest,\n          paymentMethod,\n          orderItem,\n          totalProductPrice,\n          shippingFee,\n          totalPaymentAmount,\n          orderStatus,\n        }\n      );\n      res.send(createdOrder);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  /** 주문 수정 */\n  async updateOrder(\n    req: Request<\n      adminUpdateOrderRequest[\"path\"],\n      adminUpdateOrderResponse,\n      adminUpdateOrderRequest[\"body\"],\n      adminUpdateOrderRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const { orderId } = req.params;\n\n    try {\n      await this._ordersService.updateOrder(orderId, req.body);\n      res.status(204).json();\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  /** 주문 삭제 */\n  async deleteOrder(\n    req: Request<\n      adminDeleteOrderRequest[\"path\"],\n      adminDeleteOrderResponse,\n      adminDeleteOrderRequest[\"body\"],\n      adminDeleteOrderRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const { orderId } = req.params;\n    try {\n      await this._ordersService.deleteOrder(orderId);\n      res.status(204).json();\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n"]}