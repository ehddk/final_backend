{"version":3,"file":"orders.controller.js","sourceRoot":"","sources":["../../../../src/api/orders/controller/orders.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport { OrdersService } from \"@/api/orders/service/orders.service.type\";\n\nexport default class OrdersController {\n  private readonly _ordersService: OrdersService;\n\n  constructor(_ordersService: OrdersService) {\n    this._ordersService = _ordersService;\n\n    this.getOrders = this.getOrders.bind(this);\n    this.getOrderDetail = this.getOrderDetail.bind(this);\n    this.createOrder = this.createOrder.bind(this);\n    this.updateOrder = this.updateOrder.bind(this);\n  }\n\n  /** 주문 목록 조회 */\n  async getOrders(\n    req: Request<\n      getOrdersRequest[\"path\"],\n      getOrdersResponse,\n      getOrdersRequest[\"body\"],\n      getOrdersRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const { limit, offset } = req.query;\n\n    const userId = req.user.userId;\n\n    try {\n      const orders = await this._ordersService.getOrders({\n        userId,\n        limit,\n        offset,\n      });\n\n      res.send(orders);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  /** 주문 상세 조회 */\n  async getOrderDetail(\n    req: Request<\n      getOrderDetailRequest[\"path\"],\n      getOrderDetailResponse,\n      getOrderDetailRequest[\"body\"],\n      getOrderDetailRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const { orderId } = req.params;\n    try {\n      const order = await this._ordersService.getOrderDetail(orderId);\n      res.send(order);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  /** 주문 생성 */\n  async createOrder(\n    req: Request<\n      createOrderRequest[\"path\"],\n      createOrderResponse,\n      createOrderRequest[\"body\"],\n      createOrderRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const orderStatus = \"PAYMENT_PENDING\";\n    const {\n      deliveryAddress,\n      deliveryRequest,\n      paymentMethod,\n      orderItem,\n      totalProductPrice,\n      shippingFee,\n      totalPaymentAmount,\n    } = req.body;\n\n    try {\n      const order = await this._ordersService.createOrder(req.user.userId, {\n        deliveryAddress,\n        deliveryRequest,\n        paymentMethod,\n        orderItem,\n        totalProductPrice,\n        shippingFee,\n        totalPaymentAmount,\n        orderStatus,\n      });\n\n      // orderItem이 있는 경우 개별적으로 createOrderItem 호출\n      // if (orderItem && Array.isArray(orderItem)) {\n      //   for (const item of orderItem) {\n      //     await this._orderItemsService.createOrderItem(order.orderId, item);\n      //   }\n      // }\n\n      res.send(order);\n    } catch (error) {\n      console.error(error);\n      next(error);\n    }\n  }\n\n  /** 주문 수정 */\n  async updateOrder(\n    req: Request<\n      updateOrderRequest[\"path\"],\n      updateOrderResponse,\n      updateOrderRequest[\"body\"],\n      updateOrderRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const { orderId } = req.params;\n    const { deliveryRequest, orderStatus } = req.body;\n    try {\n      await this._ordersService.updateOrder(orderId, {\n        deliveryRequest,\n        orderStatus,\n      });\n      res.sendStatus(204);\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n"]}