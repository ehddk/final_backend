{"version":3,"file":"order.validation.js","sourceRoot":"","sources":["../../../../../src/api/orders/dto/validations/order.validation.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0DAAiD;AACjD,yCAA2B;AAE3B,yBAAyB;AACzB,MAAM,uBAAuB,GAAG,GAAG,CAAC,MAAM,CAAC;IACzC,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,qBAAqB,CAAC;IAC9D,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,sBAAsB,CAAC;CACjE,CAAC,CAAC;AAEH,yBAAyB;AACZ,QAAA,kBAAkB,GAAG;IAChC,KAAK,EAAE,uBAAuB;CAC/B,CAAC;AAEF,MAAM,2BAA2B,GAAG,GAAG,CAAC,MAAM,CAAC;IAC7C,OAAO,EAAE,GAAG;SACT,MAAM,EAAE;SACR,OAAO,CAAC,mBAAK,CAAC,mBAAmB,EAAE,qBAAqB,CAAC;SACzD,QAAQ,EAAE;CACd,CAAC,CAAC;AAEH,yBAAyB;AACZ,QAAA,uBAAuB,GAAG;IACrC,IAAI,EAAE,2BAA2B;CAClC,CAAC;AAEF,MAAM,wBAAwB,GAAG,GAAG,CAAC,MAAM,CAAC;IAC1C,MAAM,EAAE,GAAG;SACR,MAAM,EAAE;SACR,QAAQ,CAAC,mBAAmB,CAAC;SAC7B,OAAO,CAAC,mBAAK,CAAC,mBAAmB,EAAE,mBAAmB,CAAC;IAC1D,eAAe,EAAE,GAAG;SACjB,MAAM,EAAE;SACR,QAAQ,EAAE;SACV,GAAG,CAAC,GAAG,EAAE,4BAA4B,CAAC;IACzC,aAAa,EAAE,GAAG;SACf,MAAM,EAAE;SACR,QAAQ,CAAC,kBAAkB,CAAC;SAC5B,KAAK,CACJ,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,EAChC,0CAA0C,CAC3C;CACJ,CAAC,CAAC;AAEH,sBAAsB;AACT,QAAA,oBAAoB,GAAG;IAClC,IAAI,EAAE,wBAAwB;CAC/B,CAAC;AAEF,MAAM,wBAAwB,GAAG,GAAG,CAAC,MAAM,CAAC;IAC1C,eAAe,EAAE,GAAG;SACjB,MAAM,EAAE;SACR,QAAQ,EAAE;SACV,GAAG,CAAC,GAAG,EAAE,4BAA4B,CAAC;IACzC,WAAW,EAAE,GAAG;SACb,MAAM,EAAE;SACR,QAAQ,EAAE;SACV,KAAK,CACJ,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,EACxC,iDAAiD,CAClD;CACJ,CAAC,CAAC;AAEH,MAAM,wBAAwB,GAAG,GAAG,CAAC,MAAM,CAAC;IAC1C,OAAO,EAAE,GAAG;SACT,MAAM,EAAE;SACR,OAAO,CAAC,mBAAK,CAAC,mBAAmB,EAAE,qBAAqB,CAAC;SACzD,QAAQ,EAAE;CACd,CAAC,CAAC;AAEH,sBAAsB;AACT,QAAA,oBAAoB,GAAG;IAClC,IAAI,EAAE,wBAAwB;IAC9B,IAAI,EAAE,wBAAwB;CAC/B,CAAC","sourcesContent":["import { REGEX } from \"@/api/common/validations\";\nimport * as yup from \"yup\";\n\n/** 주문 목록 조회 Validator */\nconst getOrdersQueryValidator = yup.object({\n  limit: yup.number().optional().positive(\"limit은 양의 정수여야 합니다.\"),\n  offset: yup.number().optional().positive(\"offset은 양의 정수여야 합니다.\"),\n});\n\n/** 주문 목록 조회 Validator */\nexport const getOrdersValidator = {\n  query: getOrdersQueryValidator,\n};\n\nconst getOrderDetailPathValidator = yup.object({\n  orderId: yup\n    .string()\n    .matches(REGEX.EMPTY_VARIABLE_PATH, \"orderId는 필수 입력값입니다.\")\n    .required(),\n});\n\n/** 주문 상세 조회 Validator */\nexport const getOrderDetailValidator = {\n  path: getOrderDetailPathValidator,\n};\n\nconst createOrderBodyValidator = yup.object({\n  userId: yup\n    .string()\n    .required(\"회원 ID는 필수 입력값입니다.\")\n    .matches(REGEX.EMPTY_VARIABLE_PATH, \"회원 ID는 유효하지 않습니다.\"),\n  deliveryRequest: yup\n    .string()\n    .optional()\n    .max(500, \"배송 요청 사항은 500자 이하로 입력해주세요.\"),\n  paymentMethod: yup\n    .string()\n    .required(\"결제수단은 필수 입력값입니다.\")\n    .oneOf(\n      [\"신용카드\", \"간편결제\", \"휴대폰\", \"카카오페이\"],\n      \"결제수단은 신용카드, 간편결제, 휴대폰, 카카오페이 중 하나여야 합니다.\"\n    ),\n});\n\n/** 주문 생성 Validator */\nexport const createOrderValidator = {\n  body: createOrderBodyValidator,\n};\n\nconst updateOrderBodyValidator = yup.object({\n  deliveryRequest: yup\n    .string()\n    .optional()\n    .max(500, \"배송 요청 사항은 500자 이하로 입력해주세요.\"),\n  orderStatus: yup\n    .string()\n    .optional()\n    .oneOf(\n      [\"결제완료\", \"배송준비중\", \"배송중\", \"배송완료\", \"주문취소\"],\n      \"주문 상태는 결제완료, 배송준비중, 배송중, 배송완료, 주문취소 중 하나여야 합니다.\"\n    ),\n});\n\nconst updateOrderPathValidator = yup.object({\n  orderId: yup\n    .string()\n    .matches(REGEX.EMPTY_VARIABLE_PATH, \"orderId는 필수 입력값입니다.\")\n    .required(),\n});\n\n/** 주문 수정 Validator */\nexport const updateOrderValidator = {\n  body: updateOrderBodyValidator,\n  path: updateOrderPathValidator,\n};\n"]}