{"version":3,"file":"orders.service.js","sourceRoot":"","sources":["../../../../src/api/orders/service/orders.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { UserRepository } from \"@/api/users/repository/user/user.repository\";\nimport HttpException from \"@/api/common/exceptions/http.exception\";\nimport { OrderRepository } from \"@/api/orders/repository/order.repository\";\nimport { OrderResponseDTO } from \"@/api/orders/dto/orderResponse.dto\";\nimport { OrdersService } from \"@/api/orders/service/orders.service.type\";\nimport { OrderItemRepository } from \"../repository/orderItem.repository\";\n\nexport class OrdersServiceImpl implements OrdersService {\n  private readonly _orderRepository: OrderRepository;\n  private readonly _userRepository: UserRepository;\n  private readonly _orderItemRepository: OrderItemRepository;\n\n  constructor(\n    orderRepository: OrderRepository,\n    userRepository: UserRepository,\n    orderItemRepository: OrderItemRepository\n  ) {\n    this._orderRepository = orderRepository;\n    this._userRepository = userRepository;\n    this._orderItemRepository = orderItemRepository;\n  }\n\n  /** 주문 생성 */\n  async createOrder(\n    userId: string,\n    order: Omit<IOrder, \"id\" | \"userInfo\" | \"orderItem\"> & {\n      orderItem: Omit<IOrderItem, \"id\">[];\n    }\n  ): Promise<OrderResponseDTO> {\n    const user = await this._userRepository.findById(userId);\n\n    if (!user) {\n      throw new HttpException(404, \"작성자를 찾을 수 없습니다.\");\n    }\n    const userInfo: IProfile = user.profile;\n\n    const orderItems: Omit<IOrderItem, \"id\">[] = await Promise.all(\n      order.orderItem.map(async (item) => {\n        const orderItem = {\n          orderItemId: \"\", // MongoDB에서 자동 생성될 ID로 대체\n          product:  { id: item.product }, // 상품 정보 (item.product에 해당하는 값)\n          quantity: item.quantity, // 주문 수량\n          totalPrice: item.totalPrice,\n          orderItemStatus: \"PAYMENT_PENDING\" as OrderItemStatus, // 주문 상태 (상태에 맞게 설정)\n        };\n        return this._orderItemRepository.save(orderItem); // 각 orderItem을 저장\n      })\n    );\n\n    const newOrder: IOrder = {\n      id: \"\", // MongoDB에서 자동 생성될 ID로 대체\n      userId: user.id,\n      userInfo,\n      deliveryAddress: order.deliveryAddress,\n      deliveryRequest: order.deliveryRequest,\n      createdAt: new Date(),\n      paymentMethod: order.paymentMethod,\n      orderItem: orderItems as IOrderItem[],\n      totalProductPrice: order.totalProductPrice,\n      shippingFee: order.shippingFee,\n      totalPaymentAmount: order.totalPaymentAmount,\n      orderStatus: \"PAYMENT_PENDING\",\n    };\n\n    // 데이터베이스에 주문 저장\n    const savedOrder = await this._orderRepository.save(newOrder);\n\n    // 유저의 주문 목록 업데이트\n    const updatedOrders = user.orders\n      ? user.orders.concat(savedOrder)\n      : [savedOrder];\n    await this._userRepository.update(user.id, {\n      orders: updatedOrders,\n    });\n\n    return new OrderResponseDTO(savedOrder);\n  }\n\n  /** 주문 목록 조회 */\n  async getOrders({\n    userId, \n    limit,\n    offset,\n  }: {\n    userId: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<{\n    totalCount: number;\n    prev: string | null;\n    results: OrderResponseDTO[];\n    next: string | null;\n  }> {\n    const orders = await this._orderRepository.findAllWithPagination({\n      userId,\n      limit,\n      offset,\n    });\n\n    return {\n      totalCount: orders.totalCount,\n      prev: orders.prev,\n      results: orders.results.map((order) => new OrderResponseDTO(order)),\n      next: orders.next,\n    };\n  }\n\n  /** 주문 상세 조회 */\n  async getOrderDetail(orderId: string): Promise<OrderResponseDTO | null> {\n    const order = await this._orderRepository.findById(orderId);\n\n    if (!order) {\n      throw new HttpException(404, \"주문을 찾을 수 없습니다.\");\n    }\n\n    return new OrderResponseDTO(order);\n  }\n\n  /** 주문 수정 */\n  async updateOrder(orderId: string, params: Partial<IOrder>): Promise<void> {\n    const findOrder = await this._orderRepository.findById(orderId);\n\n    if (!findOrder) {\n      throw new HttpException(404, \"수정할 주문을 찾을 수 없습니다.\");\n    }\n\n    // orderItem이 배열이므로, 각각 업데이트가 필요\n    if (params.orderItem && Array.isArray(params.orderItem)) {\n      // orderItem 배열에서 하나씩 업데이트 수행\n      const updatedOrderItems = await Promise.all(\n        params.orderItem.map(async (item, index) => {\n          const currentItem = findOrder.orderItem[index];\n          if (!currentItem) {\n            throw new HttpException(\n              404,\n              `OrderItem ID ${index}를 찾을 수 없습니다.`\n            );\n          }\n          return await this._orderItemRepository.update(currentItem.id, item);\n        })\n      );\n\n      // 주문의 나머지 필드 업데이트\n      await this._orderRepository.update(orderId, {\n        ...params,\n        orderItem: updatedOrderItems,\n      });\n    } else {\n      // orderItem 업데이트 없이 주문의 나머지 필드만 수정\n      await this._orderRepository.update(orderId, {\n        ...params,\n      });\n    }\n\n    return;\n  }\n\n  /** 주문 삭제 */\n  async deleteOrder(orderId: string): Promise<void> {\n    const findOrder = await this._orderRepository.findById(orderId);\n\n    if (!findOrder) {\n      throw new HttpException(404, \"삭제할 주문을 찾을 수 없습니다.\");\n    }\n\n    // orderItem 배열의 각 아이템 삭제\n    if (Array.isArray(findOrder.orderItem)) {\n      await Promise.all(\n        findOrder.orderItem.map(async (item) => {\n          await this._orderItemRepository.delete(item.id);\n        })\n      );\n    }\n\n    await this._orderRepository.delete(orderId);\n\n    return;\n  }\n}\n"]}