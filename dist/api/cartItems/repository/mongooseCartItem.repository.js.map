{"version":3,"file":"mongooseCartItem.repository.js","sourceRoot":"","sources":["../../../../src/api/cartItems/repository/mongooseCartItem.repository.ts"],"names":[],"mappings":";;;;;;AAAA,4FAAmE;AACnE,2EAAyE;AAEzE,+DAA6D;AAC7D,wEAAsE;AAEtE,MAAa,0BAA0B;IACrC,KAAK,CAAC,IAAI,CACR,MAAc,EACd,QAA+B;QAE/B,MAAM,IAAI,GAAG,MAAM,0BAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACjD,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,KAAK,CAAC,gBAAgB,MAAM,YAAY,CAAC,CAAC;QACtD,CAAC;QACD,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,EAAE,IAAI,QAAQ,CAAC,OAAO,CAAC;QAC1D,MAAM,OAAO,GAAG,MAAM,gCAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC1D,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,gBAAgB,SAAS,YAAY,CAAC,CAAC;QACzD,CAAC;QAED,MAAM,WAAW,GAAG,IAAI,kCAAgB,CAAC;YACvC,GAAG,QAAQ;YACX,MAAM,EAAE,IAAI,CAAC,EAAE;YACf,OAAO,EAAE,OAAO;SACjB,CAAC,CAAC;QAEH,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;QAEzB,OAAO,WAAW,CAAC;IACrB,CAAC;IACD,KAAK,CAAC,OAAO;QACX,OAAO,MAAM,kCAAgB,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,kCAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC;iBACjD,QAAQ,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;iBAC7B,IAAI,EAAE,CAAC;YAEV,OAAO,QAAQ,CAAC;QAClB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;YACzC,IAAI,OAAO,CAAC,QAAQ,CAAC,yBAAyB,CAAC,EAAE,CAAC;gBAChD,OAAO,IAAI,CAAC;YACd,CAAC;YAED,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,KAAK,CAAC,MAAM,CACV,UAAkB,EAClB,kBAAsC;QAEtC,MAAM,OAAO,GAAG,MAAM,kCAAgB,CAAC,iBAAiB,CACtD,UAAU,EACV,kBAAkB,CACnB,CAAC;QAEF,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;QACpD,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,UAAkB;QAC7B,MAAM,kCAAgB,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;QAEtD,OAAO;IACT,CAAC;CACF;AAlED,gEAkEC","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { MongooseCartItem } from \"@/api/cartItems/model/cartItem.schema\";\nimport { CartItemRepository } from \"@/api/cartItems/repository/cartItem.repository\";\nimport { MongooseCart } from \"@/api/carts/model/cart.schema\";\nimport { MongooseProduct } from \"@/api/products/model/product.schema\";\n\nexport class MongooseCartItemRepository implements CartItemRepository {\n  async save(\n    cartId: string,\n    cartItem: Omit<ICartItem, \"id\">\n  ): Promise<ICartItem> {\n    const cart = await MongooseCart.findById(cartId);\n    if (!cart) {\n      throw new Error(`Cart with id ${cartId} not found`);\n    }\n    const productId = cartItem.product.id || cartItem.product;\n    const product = await MongooseProduct.findById(productId);\n    if (!product) {\n      throw new Error(`Cart with id ${productId} not found`);\n    }\n\n    const newCartItem = new MongooseCartItem({\n      ...cartItem,\n      cartId: cart.id,\n      product: product,\n    });\n\n    await newCartItem.save();\n\n    return newCartItem;\n  }\n  async findAll(): Promise<ICartItem[]> {\n    return await MongooseCartItem.find().populate(\"product\");\n  }\n\n  async findById(id: string): Promise<ICartItem | null> {\n    try {\n      const cartItem = await MongooseCartItem.findById(id)\n        .populate({ path: \"product\" })\n        .exec();\n\n      return cartItem;\n    } catch (error: any) {\n      const message = error.message.toString();\n      if (message.includes(\"Cast to ObjectId failed\")) {\n        return null;\n      }\n\n      throw error;\n    }\n  }\n\n  async update(\n    cartItemId: string,\n    updateCartItemInfo: Partial<ICartItem>\n  ): Promise<ICartItem> {\n    const results = await MongooseCartItem.findByIdAndUpdate(\n      cartItemId,\n      updateCartItemInfo\n    );\n\n    if (!results) {\n      throw new HttpException(404, \"주문 상품을 찾을 수 없습니다.\");\n    }\n\n    return results;\n  }\n  async delete(cartItemId: string): Promise<void> {\n    await MongooseCartItem.deleteOne({ _id: cartItemId });\n\n    return;\n  }\n}\n"]}