{"version":3,"file":"cartItems.service.js","sourceRoot":"","sources":["../../../../src/api/cartItems/service/cartItems.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { CartItemRepository } from \"@/api/cartItems/repository/cartItem.repository\";\nimport { CartItemsService } from \"@/api/cartItems/service/cartItems.service.type\";\nimport { CartRepository } from \"@/api/carts/repository/cart.repository\";\nimport HttpException from \"@/api/common/exceptions/http.exception\";\nimport { CartItemResponseDTO } from \"@/api/cartItems/dto/cartItemResponse.dto\";\nimport { UserRepository } from \"@/api/users/repository/user/user.repository\";\nimport { ProductRepository } from \"@/api/products/repository/product.repository\";\n\nexport class CartItemsServiceImpl implements CartItemsService {\n  private readonly _cartItemRepository: CartItemRepository;\n  private readonly _cartRepository: CartRepository;\n  private readonly _productRepository: ProductRepository;\n  private readonly _userRepository: UserRepository;\n  constructor(\n    cartItemRepository: CartItemRepository,\n    cartRepository: CartRepository,\n    userRepository: UserRepository,\n    productRepository: ProductRepository\n  ) {\n    this._cartItemRepository = cartItemRepository;\n    this._cartRepository = cartRepository;\n    this._userRepository = userRepository;\n    this._productRepository = productRepository;\n  }\n\n  async createCartItem(\n    userId: string,\n    cartItem: Omit<ICartItem, \"id\">\n  ): Promise<CartItemResponseDTO> {\n    const cart = await this._cartRepository.findOneByUserId(userId);\n    console.log(\"userId:\", userId);\n    console.log(\"cart:\", cart);\n    if (!cart) {\n      throw new HttpException(404, \"장바구니를 찾을 수 없습니다.\");\n    }\n    console.log(\"cartItem:\", cartItem);\n    console.log(\"cartItem.product:\", cartItem.product);\n    const productId =\n      typeof cartItem.product === \"string\"\n        ? cartItem.product\n        : cartItem.product?.id;\n    if (!productId) {\n      throw new HttpException(400, \"상품 ID가 유효하지 않습니다.\");\n    }\n    const product = await this._productRepository.findById(productId);\n    console.log(\"product:\", product);\n    if (!product) {\n      throw new HttpException(404, \"해당 상품를 찾을 수 없습니다.\");\n    }\n\n    const newCartItem: ICartItem = {\n      id: \"\",\n      ...cartItem,\n      cartId: cart.id,\n      product,\n      quantity: cartItem.quantity,\n      totalPrice: cartItem.totalPrice,\n    };\n\n    const savedCartItem = await this._cartItemRepository.save(\n      cart.id,\n      newCartItem\n    );\n\n    const updatedCartItem = cart.cartItem\n      ? cart.cartItem.concat(savedCartItem)\n      : [savedCartItem];\n    await this._cartRepository.update(cart.id, {\n      cartItem: updatedCartItem,\n    });\n    return new CartItemResponseDTO(savedCartItem);\n  }\n\n  async getCartItems(): Promise<CartItemResponseDTO[]> {\n    const cartItems = await this._cartItemRepository.findAll();\n    const newList = await Promise.all(\n      cartItems.map((cartItem) => new CartItemResponseDTO(cartItem))\n    );\n\n    return newList;\n  }\n\n  async getCartItemDetail(\n    cartItemId: string\n  ): Promise<CartItemResponseDTO | null> {\n    const cartItem = await this._cartItemRepository.findById(cartItemId);\n\n    if (!cartItem) {\n      throw new HttpException(404, \"주문 상품을 찾을 수 없습니다.\");\n    }\n\n    return new CartItemResponseDTO(cartItem);\n  }\n  async updateCartItem(\n    cartItemId: string,\n    updatedCartItem: Omit<ICartItem, \"id\" | \"product\" | \"user\">\n  ): Promise<void> {\n    await this._cartItemRepository.update(cartItemId, updatedCartItem);\n  }\n\n  async deleteCartItem(cartItemId: string): Promise<void> {\n    await this._cartItemRepository.delete(cartItemId);\n  }\n}\n"]}