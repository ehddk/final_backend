{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../../../src/api/auth/service/auth.service.ts"],"names":[],"mappings":";;;;;;AAAA,yEAAqE;AAGrE,4FAAmE;AACnE,mEAA+D;AAE/D,MAAa,eAAe;IACT,eAAe,CAAiB;IACjD,YAAY,cAA8B;QACxC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,OAAe,EAAE,QAAgB;QAC3C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAEnE,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAA;YAC7B,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QACjD,CAAC;QAGD,MAAM,cAAc,GAAG,8BAAa,CAAC,aAAa,CAChD,QAAQ,EACR,QAAQ,EAAE,QAAQ,IAAI,EAAE,EACxB,QAAQ,CAAC,IAAI,IAAI,EAAE,CACpB,CAAC;QAEF,IAAI,CAAC,cAAc,EAAE,CAAC;YACpB,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,kBAAkB,CAAC,CAAC;QACnD,CAAC;QAED,MAAM,WAAW,GAAG,wBAAU,CAAC,mBAAmB,CAAC;YACjD,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,MAAM,EAAE,QAAQ,CAAC,EAAE;YACnB,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC;IACrB,CAAC;CACF;AAjCD,0CAiCC","sourcesContent":["import { CryptoService } from \"@/api/common/services/crypto.service\";\nimport { AuthService } from \"@/api/auth/service/auth.service.type\";\nimport { UserRepository } from \"@/api/users/repository/user/user.repository\";\nimport HttpException from \"@/api/common/exceptions/http.exception\";\nimport { JwtService } from \"@/api/common/services/jwt.service\";\n\nexport class AuthServiceImpl implements AuthService {\n  private readonly _userRepository: UserRepository;\n  constructor(userRepository: UserRepository) {\n    this._userRepository = userRepository;\n  }\n\n  async login(loginId: string, password: string): Promise<string> {\n    const findUser = await this._userRepository.findByLoginId(loginId);\n\n    if (!findUser) {\n      console.log(\"존재하지 않는 회원입니다.\")\n      throw new HttpException(404, \"존재하지 않는 회원입니다.\");\n    }\n    \n\n    const isSamePassword = CryptoService.matchPassword(\n      password,\n      findUser?.password || \"\",\n      findUser.salt ?? \"\"\n    );\n\n    if (!isSamePassword) {\n      throw new HttpException(401, \"비밀번호가 일치하지 않습니다.\");\n    }\n\n    const accessToken = JwtService.generateAccessToken({\n      role: findUser.role,\n      userId: findUser.id,\n      expiresIn: \"7d\",\n    });\n\n    return accessToken;\n  }\n}\n"]}