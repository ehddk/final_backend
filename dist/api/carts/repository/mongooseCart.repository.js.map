{"version":3,"file":"mongooseCart.repository.js","sourceRoot":"","sources":["../../../../src/api/carts/repository/mongooseCart.repository.ts"],"names":[],"mappings":";;;AACA,+DAA6D;AAG7D,MAAa,sBAAsB;IACjC,cAAc;IACd,KAAK,CAAC,IAAI,CAAC,IAAuB;QAChC,MAAM,OAAO,GAAG,IAAI,0BAAY,CAAC,IAAI,CAAC,CAAC;QACvC,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;QACrB,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,MAAM,GAAG,MAAM,0BAAY,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC;YAChD,IAAI,EAAE,UAAU;YAChB,QAAQ,EAAE;gBACR,IAAI,EAAE,SAAS;aAChB;SACF,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,kBAAkB;IAClB,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,0BAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC;gBACxD,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE;oBACR,IAAI,EAAE,SAAS;iBAChB;aACF,CAAC,CAAC;YAEH,OAAO,QAAQ,CAAC;QAClB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;YACzC,IAAI,OAAO,CAAC,QAAQ,CAAC,yBAAyB,CAAC,EAAE,CAAC;gBAChD,OAAO,IAAI,CAAC;YACd,CAAC;YAED,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,sBAAsB;IACtB,KAAK,CAAC,eAAe,CAAC,MAAc;QAClC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,0BAAY,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC;gBAC/D,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE;oBACR,IAAI,EAAE,SAAS;iBAChB;aACF,CAAC,CAAC;YAEH,OAAO,QAAQ,CAAC;QAClB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;YACzC,IAAI,OAAO,CAAC,QAAQ,CAAC,yBAAyB,CAAC,EAAE,CAAC;gBAChD,OAAO,IAAI,CAAC;YACd,CAAC;YAED,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,gBAAgB;IAChB,KAAK,CAAC,MAAM,CAAC,MAAc,EAAE,cAA8B;QACzD,MAAM,0BAAY,CAAC,iBAAiB,CAAC,MAAM,EAAE;YAC3C,GAAG,cAAc;YACjB,QAAQ,EAAE,cAAc,CAAC,QAAQ,IAAI,SAAS,EAAE,aAAa;SAC9D,CAAC,CAAC,QAAQ,CAAC;YACV,IAAI,EAAE,UAAU;YAChB,QAAQ,EAAE;gBACR,IAAI,EAAE,SAAS;aAChB;SACF,CAAC,CAAC;QAEH,OAAO;IACT,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,MAAc;QACzB,MAAM,0BAAY,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QAE9C,OAAO;IACT,CAAC;CACF;AAhFD,wDAgFC","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { MongooseCart } from \"@/api/carts/model/cart.schema\";\nimport { CartRepository } from \"@/api/carts/repository/cart.repository\";\n\nexport class MongooseCartRepository implements CartRepository {\n  /** 장바구니 생성 */\n  async save(cart: Omit<ICart, \"id\">): Promise<ICart> {\n    const newCart = new MongooseCart(cart);\n    await newCart.save();\n    return newCart;\n  }\n\n  async findAll(): Promise<ICart[]> {\n    const values = await MongooseCart.find().populate({\n      path: \"cartItem\",\n      populate: {\n        path: \"product\",\n      },\n    });\n    return values;\n  }\n\n  /** ID로 장바구니 조회 */\n  async findById(id: string): Promise<ICart | null> {\n    try {\n      const findCart = await MongooseCart.findById(id).populate({\n        path: \"cartItem\",\n        populate: {\n          path: \"product\",\n        },\n      });\n\n      return findCart;\n    } catch (error: any) {\n      const message = error.message.toString();\n      if (message.includes(\"Cast to ObjectId failed\")) {\n        return null;\n      }\n\n      throw error;\n    }\n  }\n\n  /** userId로 장바구니 조회 */\n  async findOneByUserId(userId: string): Promise<ICart | null> {\n    try {\n      const findCart = await MongooseCart.findOne({ userId }).populate({\n        path: \"cartItem\",\n        populate: {\n          path: \"product\",\n        },\n      });\n\n      return findCart;\n    } catch (error: any) {\n      const message = error.message.toString();\n      if (message.includes(\"Cast to ObjectId failed\")) {\n        return null;\n      }\n\n      throw error;\n    }\n  }\n\n  /** 장바구니 업데이트 */\n  async update(cartId: string, updateCartInfo: Partial<ICart>): Promise<void> {\n    await MongooseCart.findByIdAndUpdate(cartId, {\n      ...updateCartInfo,\n      cartItem: updateCartInfo.cartItem || undefined, // 예약 목록 업데이트\n    }).populate({\n      path: \"cartItem\",\n      populate: {\n        path: \"product\",\n      },\n    });\n\n    return;\n  }\n\n  async delete(cartId: string): Promise<void> {\n    await MongooseCart.deleteOne({ _id: cartId });\n\n    return;\n  }\n}\n"]}