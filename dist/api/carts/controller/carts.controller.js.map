{"version":3,"file":"carts.controller.js","sourceRoot":"","sources":["../../../../src/api/carts/controller/carts.controller.ts"],"names":[],"mappings":";;AAGA,MAAqB,eAAe;IACjB,aAAa,CAAe;IAC7C,YAAY,aAA2B;QACrC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QAEnC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,cAAc;IACd,KAAK,CAAC,UAAU,CACd,GAKC,EACD,GAAa,EACb,IAAkB;QAElB,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC;gBAC/C,iBAAiB,EAAE,GAAG,CAAC,IAAI,CAAC,iBAAiB;gBAC7C,WAAW,EAAE,GAAG,CAAC,IAAI,CAAC,WAAW;gBACjC,kBAAkB,EAAE,GAAG,CAAC,IAAI,CAAC,kBAAkB;gBAC/C,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE;gBACjC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM;aACxB,CAAC,CAAC;YAEH,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,CAAC;QACd,CAAC;IACH,CAAC;IAED,cAAc;IACd,KAAK,CAAC,OAAO,CACX,GAKC,EACD,GAAa,EACb,IAAkB;QAElB,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;YAC/B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAEtD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,CAAC;QACd,CAAC;IACH,CAAC;IAED,gBAAgB;IAChB,KAAK,CAAC,UAAU,CACd,GAKC,EACD,GAAa,EACb,IAAkB;QAElB,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAE9B,IAAI,CAAC;YACH,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;YAC1E,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACxB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,CAAC;QACd,CAAC;IACH,CAAC;CACF;AA7ED,kCA6EC","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport { CartsService } from \"@/api/carts/service/carts.service.type\";\n\nexport default class CartsController {\n  private readonly _cartsService: CartsService;\n  constructor(_cartsService: CartsService) {\n    this._cartsService = _cartsService;\n\n    this.createCart = this.createCart.bind(this);\n    this.getCart = this.getCart.bind(this);\n    this.updateCart = this.updateCart.bind(this);\n  }\n\n  /** 장바구니 생성 */\n  async createCart(\n    req: Request<\n      createCartRequest[\"path\"],\n      createCartResponse,\n      createCartRequest[\"body\"],\n      createCartRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    try {\n      const cart = await this._cartsService.createCart({\n        totalProductPrice: req.body.totalProductPrice,\n        shippingFee: req.body.shippingFee,\n        totalPaymentAmount: req.body.totalPaymentAmount,\n        cartItem: req.body.cartItem || [],\n        userId: req.user.userId,\n      });\n\n      res.send(cart);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  /** 장바구니 조회 */\n  async getCart(\n    req: Request<\n      getCartRequest[\"path\"],\n      getCartResponse,\n      getCartRequest[\"body\"],\n      getCartRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    try {\n      const userId = req.user.userId;\n      const cart = await this._cartsService.getCart(userId);\n\n      res.send(cart);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  /** 장바구니 업데이트 */\n  async updateCart(\n    req: Request<\n      updateCartRequest[\"path\"],\n      updateCartResponse,\n      updateCartRequest[\"body\"],\n      updateCartRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const { cartId } = req.params;\n\n    try {\n      const updatedCart = await this._cartsService.updateCart(cartId, req.body);\n      res.send(updatedCart);\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n"]}