{"version":3,"file":"carts.service.js","sourceRoot":"","sources":["../../../../src/api/carts/service/carts.service.ts"],"names":[],"mappings":";;;;;;AAAA,uEAAmE;AAGnE,4FAAmE;AAEnE,MAAa,gBAAgB;IACE;IAA7B,YAA6B,eAA+B;QAA/B,oBAAe,GAAf,eAAe,CAAgB;IAAG,CAAC;IAEhE,cAAc;IACd,KAAK,CAAC,UAAU,CACd,MAGC;QAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YAC3C,GAAG,MAAM;YACT,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,EAAE;SAChC,CAAC,CAAC;QAEH,OAAO,IAAI,kCAAe,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,cAAc;IACd,KAAK,CAAC,OAAO,CAAC,MAAc;QAC1B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAEhE,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QAClD,CAAC;QAED,OAAO,IAAI,kCAAe,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,gBAAgB;IAChB,KAAK,CAAC,UAAU,CAAC,MAAc,EAAE,WAA2B;QAC1D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE7D,IAAI,CAAC,QAAQ;YAAE,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,kBAAkB,CAAC,CAAC;QAEhE,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE;YACxC,GAAG,WAAW;YACd,QAAQ,EAAE,WAAW,EAAE,QAAQ,IAAI,QAAQ,CAAC,QAAQ;SACrD,CAAC,CAAC;QACH,OAAO;IACT,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,MAAc;QAC7B,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;CACF;AA9CD,4CA8CC","sourcesContent":["import { CartResponseDTO } from \"@/api/carts/dto/cartResponse.dto\";\nimport { CartRepository } from \"@/api/carts/repository/cart.repository\";\nimport { CartsService } from \"@/api/carts/service/carts.service.type\";\nimport HttpException from \"@/api/common/exceptions/http.exception\";\n\nexport class CartsServiceImpl implements CartsService {\n  constructor(private readonly _cartRepository: CartRepository) {}\n\n  /** 장바구니 생성 */\n  async createCart(\n    params: Omit<ICart, \"id\"> & {\n      userId: string;\n      cartItem?: ICartItem[];\n    }\n  ): Promise<CartResponseDTO> {\n    const cart = await this._cartRepository.save({\n      ...params,\n      userId: params.userId,\n      cartItem: params.cartItem || [],\n    });\n\n    return new CartResponseDTO(cart);\n  }\n\n  /** 장바구니 조회 */\n  async getCart(userId: string): Promise<CartResponseDTO> {\n    const cart = await this._cartRepository.findOneByUserId(userId);\n\n    if (!cart) {\n      throw new HttpException(404, \"아이디를 찾을 수 없습니다.\");\n    }\n\n    return new CartResponseDTO(cart);\n  }\n\n  /** 장바구니 업데이트 */\n  async updateCart(cartId: string, updatedCart: Partial<ICart>): Promise<void> {\n    const findCart = await this._cartRepository.findById(cartId);\n\n    if (!findCart) throw new HttpException(404, \"장바구니를 찾을 수 없습니다.\");\n\n    await this._cartRepository.update(cartId, {\n      ...updatedCart,\n      cartItem: updatedCart?.cartItem || findCart.cartItem,\n    });\n    return;\n  }\n\n  async deleteCart(cartId: string): Promise<void> {\n    await this._cartRepository.delete(cartId);\n  }\n}\n"]}