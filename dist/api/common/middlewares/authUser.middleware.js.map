{"version":3,"file":"authUser.middleware.js","sourceRoot":"","sources":["../../../../src/api/common/middlewares/authUser.middleware.ts"],"names":[],"mappings":";;;;;;AACA,kFAAyD;AACzD,yDAAqD;AAErD,cAAc;AACP,MAAM,kBAAkB,GAAG,CAChC,GAAY,EACZ,GAAa,EACb,IAAkB,EAClB,EAAE;IACF,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;QAExC,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QAC5C,CAAC;QAED,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QAE7C,MAAM,OAAO,GAAG,wBAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;QAEzD,GAAG,CAAC,IAAI,GAAG;YACT,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,IAAI,EAAE,OAAO,CAAC,IAAI;SACnB,CAAC;QAEF,IAAI,EAAE,CAAC;IACT,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,IAAI,CAAC,IAAI,wBAAa,CAAC,GAAG,EAAE,SAAS,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IACzD,CAAC;AACH,CAAC,CAAC;AAzBW,QAAA,kBAAkB,sBAyB7B","sourcesContent":["import { Request, Response, NextFunction } from \"express\";\nimport HttpException from \"../exceptions/http.exception\";\nimport { JwtService } from \"../services/jwt.service\";\n\n/** 인증 미들웨어 */\nexport const authUserMiddleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const token = req.headers.authorization;\n\n    if (!token) {\n      throw new HttpException(401, \"토큰이 없습니다.\");\n    }\n\n    const tokenValue = token.split(\"Bearer \")[1];\n\n    const payload = JwtService.verifyAccessToken(tokenValue);\n\n    req.user = {\n      userId: payload.userId,\n      role: payload.role,\n    };\n\n    next();\n  } catch (error: any) {\n    next(new HttpException(401, `인증 실패 ${error.message}`));\n  }\n};\n"]}