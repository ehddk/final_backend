{"version":3,"file":"crypto.service.js","sourceRoot":"","sources":["../../../../src/api/common/services/crypto.service.ts"],"names":[],"mappings":";;;;;;AAAA,8DAAiC;AAEjC,MAAa,aAAa;IACxB,YAAY;IACL,MAAM,CAAC,YAAY;QACxB,OAAO,qBAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IAED,eAAe;IACR,MAAM,CAAC,eAAe,CAAC,QAAiB;QAI7C,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAEjC,OAAO;YACL,cAAc,EAAE,QAAQ;gBACtB,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC;gBACvC,CAAC,CAAC,SAAS;YACb,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS;SAClC,CAAC;IACJ,CAAC;IAED,iBAAiB;IACV,MAAM,CAAC,aAAa,CACzB,aAAqB,EACrB,cAAsB,EACtB,IAAY;QAEZ,OAAO,cAAc,KAAK,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;IACvE,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAAC,QAAgB,EAAE,IAAY;QAC5D,OAAO,qBAAM;aACV,UAAU,CAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,CAAC;aAChD,QAAQ,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC;CACF;AAnCD,sCAmCC","sourcesContent":["import crypto from \"node:crypto\";\n\nexport class CryptoService {\n  /** 솔트 생성 */\n  public static generateSalt(): string {\n    return crypto.randomBytes(64).toString(\"hex\");\n  }\n\n  /** 비밀번호 암호화 */\n  public static encryptPassword(password?: string): {\n    hashedPassword?: string;\n    salt?: string;\n  } {\n    const salt = this.generateSalt();\n\n    return {\n      hashedPassword: password\n        ? this._encryptPassword(password, salt)\n        : undefined,\n      salt: password ? salt : undefined,\n    };\n  }\n\n  /** 비밀번호 일치 확인 */\n  public static matchPassword(\n    plainPassword: string,\n    hashedPassword: string,\n    salt: string\n  ): boolean {\n    return hashedPassword === this._encryptPassword(plainPassword, salt);\n  }\n\n  private static _encryptPassword(password: string, salt: string): string {\n    return crypto\n      .pbkdf2Sync(password, salt, 100000, 64, \"sha512\")\n      .toString(\"hex\");\n  }\n}\n"]}