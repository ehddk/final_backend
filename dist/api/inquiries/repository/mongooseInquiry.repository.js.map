{"version":3,"file":"mongooseInquiry.repository.js","sourceRoot":"","sources":["../../../../src/api/inquiries/repository/mongooseInquiry.repository.ts"],"names":[],"mappings":";;;;;;AAAA,4FAAmE;AACnE,yEAAuE;AAGvE,MAAa,yBAAyB;IACpC,KAAK,CAAC,qBAAqB,CAAC,EAC1B,MAAM,EACN,KAAK,GAIN;QAMC,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACxC,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QACvC,8CAA8C;QAC9C,MAAM,IAAI,GAAG,MAAM,gCAAe,CAAC,IAAI,EAAE;aACtC,KAAK,CAAC,UAAU,CAAC;aACjB,IAAI,CAAC,WAAW,CAAC;aACjB,QAAQ,CAAC;YACR,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE;gBACR,IAAI,EAAE,SAAS;aAChB;SACF,CAAC;aACD,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QAE3B,MAAM,UAAU,GAAG,MAAM,gCAAe,CAAC,IAAI,EAAE,CAAC,cAAc,EAAE,CAAC;QAEjE,OAAO;YACL,UAAU;YACV,OAAO,EAAE,IAAI;YACb,IAAI,EACF,WAAW,GAAG,UAAU,IAAI,CAAC;gBAC3B,CAAC,CAAC,WAAW,WAAW,GAAG,UAAU,UAAU,UAAU,EAAE;gBAC3D,CAAC,CAAC,IAAI;YACV,IAAI,EACF,WAAW,GAAG,UAAU,GAAG,UAAU;gBACnC,CAAC,CAAC,WAAW,WAAW,GAAG,UAAU,UAAU,UAAU,EAAE;gBAC3D,CAAC,CAAC,IAAI;SACX,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,OAA6B;QACtC,MAAM,UAAU,GAAG,IAAI,gCAAe,CAAC;YACrC,GAAG,OAAO;SACX,CAAC,CAAC;QAEH,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;QAExB,OAAO,UAAU,CAAC;IACpB,CAAC;IACD,KAAK,CAAC,OAAO;QACX,MAAM,MAAM,GAAG,MAAM,gCAAe,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC;YACnD,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE;gBACR,IAAI,EAAE,SAAS;aAChB;SACF,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,MAAM,OAAO,GAAG,MAAM,gCAAe,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC;YAC1D,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE;gBACR,IAAI,EAAE,SAAS;aAChB;SACF,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,SAAiB,EAAE,iBAAoC;QAClE,MAAM,OAAO,GAAG,MAAM,gCAAe,CAAC,iBAAiB,CACrD,SAAS,EACT,iBAAiB,CAClB,CAAC;QAEF,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;QACpD,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,SAAiB;QAC5B,MAAM,gCAAe,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC;QAEpD,OAAO;IACT,CAAC;CACF;AAxFD,8DAwFC","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { MongooseInquiry } from \"@/api/inquiries/model/inquiry.schema\";\nimport { InquiryRepository } from \"@/api/inquiries/repository/inquiry.repository\";\n\nexport class MongooseInquiryRepository implements InquiryRepository {\n  async findAllWithPagination({\n    offset,\n    limit,\n  }: {\n    offset: number;\n    limit: number;\n  }): Promise<{\n    totalCount: number;\n    prev: string | null;\n    results: IInquiry[];\n    next: string | null;\n  }> {\n    const offsetValue = Number(offset) || 0;\n    const limitValue = Number(limit) || 10;\n    // throw new Error(\"Method not implemented.\");\n    const list = await MongooseInquiry.find()\n      .limit(limitValue)\n      .skip(offsetValue)\n      .populate({\n        path: \"author\",\n        populate: {\n          path: \"profile\",\n        },\n      })\n      .sort({ createdAt: -1 });\n\n    const totalCount = await MongooseInquiry.find().countDocuments();\n\n    return {\n      totalCount,\n      results: list,\n      prev:\n        offsetValue - limitValue >= 0\n          ? `?offset=${offsetValue - limitValue}&limit=${limitValue}`\n          : null,\n      next:\n        offsetValue + limitValue < totalCount\n          ? `?offset=${offsetValue + limitValue}&limit=${limitValue}`\n          : null,\n    };\n  }\n\n  async save(inquiry: Omit<IInquiry, \"id\">): Promise<IInquiry> {\n    const newInquiry = new MongooseInquiry({\n      ...inquiry,\n    });\n\n    await newInquiry.save();\n\n    return newInquiry;\n  }\n  async findAll(): Promise<IInquiry[]> {\n    const values = await MongooseInquiry.find().populate({\n      path: \"author\",\n      populate: {\n        path: \"profile\",\n      },\n    });\n\n    return values;\n  }\n  async findById(id: string): Promise<IInquiry | null> {\n    const inquiry = await MongooseInquiry.findById(id).populate({\n      path: \"author\",\n      populate: {\n        path: \"profile\",\n      },\n    });\n    return inquiry;\n  }\n  async update(inquiryId: string, updateInquiryInfo: Partial<IInquiry>): Promise<IInquiry> {\n    const results = await MongooseInquiry.findByIdAndUpdate(\n      inquiryId,\n      updateInquiryInfo\n    );\n\n    if (!results) {\n      throw new HttpException(404, \"1:1문의을 찾을 수 없습니다.\");\n    }\n\n    return results;\n  }\n  async delete(inquiryId: string): Promise<void> {\n    await MongooseInquiry.deleteOne({ _id: inquiryId });\n\n    return;\n  }\n}\n"]}