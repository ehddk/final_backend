{"version":3,"file":"inquiries.service.js","sourceRoot":"","sources":["../../../../src/api/inquiries/service/inquiries.service.ts"],"names":[],"mappings":";;;;;;AACA,iFAA6E;AAG7E,4FAAmE;AAGnE,MAAa,oBAAoB;IACd,kBAAkB,CAAoB;IACtC,eAAe,CAAiB;IACjD,YAAY,iBAAoC,EAAE,cAA8B;QAC9E,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,MAAc,EACd,OAAwC;QAExC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE3D,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QAClD,CAAC;QAED,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;YACpD,GAAG,OAAO;YACV,MAAM;SACP,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;QAE1D,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;YAC3C,SAAS,EAAE,YAAY;SACxB,CAAC,CAAC;QAEH,OAAO,IAAI,wCAAkB,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC;IACD,KAAK,CAAC,YAAY,CAAC,EACjB,KAAK,EACL,MAAM,GAIP;QAMC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC;YACpE,KAAK;YACL,MAAM;SACP,CAAC,CAAC;QAEH,OAAO;YACL,UAAU,EAAE,SAAS,CAAC,UAAU;YAChC,IAAI,EAAE,SAAS,CAAC,IAAI;YACpB,OAAO,EAAE,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,wCAAkB,CAAC,OAAO,CAAC,CAAC;YAC5E,IAAI,EAAE,SAAS,CAAC,IAAI;SACrB,CAAC;IACJ,CAAC;IACD,KAAK,CAAC,gBAAgB,CAAC,SAAiB;QACtC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAElE,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;QACpD,CAAC;QAED,OAAO,IAAI,wCAAkB,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IACD,KAAK,CAAC,aAAa,CACjB,SAAiB,EACjB,cAA+C;QAE/C,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QAEhE,OAAO;IACT,CAAC;IACD,KAAK,CAAC,aAAa,CAAC,SAAiB;QACnC,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAClD,CAAC;CACF;AA3ED,oDA2EC","sourcesContent":["import { UserRepository } from \"@/api/users/repository/user/user.repository\";\nimport { InquiryResponseDTO } from \"@/api/inquiries/dto/inquiryResponse.dto\";\nimport { InquiryRepository } from \"@/api/inquiries/repository/inquiry.repository\";\n\nimport HttpException from \"@/api/common/exceptions/http.exception\";\nimport { InquiriesService } from \"@/api/inquiries/service/inquiries.service.type\";\n\nexport class InquiriesServiceImpl implements InquiriesService {\n  private readonly _inquiryRepository: InquiryRepository;\n  private readonly _userRepository: UserRepository;\n  constructor(inquiryRepository: InquiryRepository, userRepository: UserRepository) {\n    this._inquiryRepository = inquiryRepository;\n    this._userRepository = userRepository;\n  }\n\n  async createInquiry(\n    userId: string,\n    inquiry: Omit<IInquiry, \"id\" | \"author\">\n  ): Promise<InquiryResponseDTO> {\n    const author = await this._userRepository.findById(userId);\n\n    if (!author) {\n      throw new HttpException(404, \"작성자를 찾을 수 없습니다.\");\n    }\n\n    const newInquiry = await this._inquiryRepository.save({\n      ...inquiry,\n      author,\n    });\n\n    const newInquiries = author.inquiries?.concat(newInquiry);\n\n    await this._userRepository.update(author.id, {\n      inquiries: newInquiries,\n    });\n\n    return new InquiryResponseDTO(newInquiry);\n  }\n  async getInquiries({\n    limit,\n    offset,\n  }: {\n    limit?: number;\n    offset?: number;\n  }): Promise<{\n    totalCount: number;\n    prev: string | null;\n    results: InquiryResponseDTO[];\n    next: string | null;\n  }> {\n    const inquiries = await this._inquiryRepository.findAllWithPagination({\n      limit,\n      offset,\n    });\n\n    return {\n      totalCount: inquiries.totalCount,\n      prev: inquiries.prev,\n      results: inquiries.results.map((inquiry) => new InquiryResponseDTO(inquiry)),\n      next: inquiries.next,\n    };\n  }\n  async getInquiryDetail(inquiryId: string): Promise<InquiryResponseDTO | null> {\n    const inquiry = await this._inquiryRepository.findById(inquiryId);\n\n    if (!inquiry) {\n      throw new HttpException(404, \"1:1문의을 찾을 수 없습니다.\");\n    }\n\n    return new InquiryResponseDTO(inquiry);\n  }\n  async updateInquiry(\n    inquiryId: string,\n    updatedInquiry: Omit<IInquiry, \"id\" | \"author\">\n  ): Promise<void> {\n    await this._inquiryRepository.update(inquiryId, updatedInquiry);\n\n    return;\n  }\n  async deleteInquiry(inquiryId: string): Promise<void> {\n    await this._inquiryRepository.delete(inquiryId);\n  }\n}\n"]}