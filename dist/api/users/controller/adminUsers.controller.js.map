{"version":3,"file":"adminUsers.controller.js","sourceRoot":"","sources":["../../../../src/api/users/controller/adminUsers.controller.ts"],"names":[],"mappings":";AAAA,QAAQ;AACR,sBAAsB;AACtB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;;AAIrB,yEAAqE;AAErE,MAAqB,mBAAmB;IAClB;IAApB,YAAoB,YAAyB;QAAzB,iBAAY,GAAZ,YAAY,CAAa;QAC3C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,qBAAqB;IACrB,KAAK,CAAC,QAAQ,CACZ,GAKC,EACD,GAAa,EACb,IAAkB;QAElB,IAAI,CAAC;YACH,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;YACjD,6BAA6B;YAC7B,mBAAmB;YACnB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,iBAAiB;gBAC1B,IAAI,EAAE,KAAK;aACZ,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC,CAAC;YACrD,IAAI,CAAC,KAAK,CAAC,CAAC;QACd,CAAC;IACH,CAAC;IAED,qBAAqB;IACrB,KAAK,CAAC,OAAO,CACX,GAKC,EACD,GAAa,EACb,IAAkB;QAElB,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE9B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAErD,6BAA6B;YAE7B,8BAA8B;YAC9B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,iBAAiB;gBAC1B,IAAI,EAAE,IAAI;aACX,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC,CAAC;YACrD,eAAe;QACjB,CAAC;IACH,CAAC;IAED,kBAAkB;IAClB,KAAK,CAAC,UAAU,CACd,GAKC,EACD,GAAa,EACb,IAAkB;QAElB,IAAI,CAAC;YACH,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAE9B,MAAM,EAAE,cAAc,EAAE,IAAI,EAAE,GAAG,8BAAa,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAEzE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC;gBACjD,GAAG,GAAG,CAAC,IAAI;gBACX,QAAQ,EAAE,cAAc;gBACxB,IAAI;aACL,CAAC,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;YACpB,0BAA0B;YAC1B,qBAAqB;YACrB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,OAAO;aACd,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;YAClD,eAAe;QACjB,CAAC;IACH,CAAC;IAED,kBAAkB;IAClB,KAAK,CAAC,UAAU,CACd,GAKC,EACD,GAAa,EACb,IAAkB;QAElB,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;YAE7E,0BAA0B;YAE1B,8BAA8B;YAC9B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,IAAI;aACX,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;YAClD,eAAe;QACjB,CAAC;IACH,CAAC;IAED,kBAAkB;IAClB,KAAK,CAAC,UAAU,CACd,GAKC,EACD,GAAa,EACb,IAAkB;QAElB,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE9B,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAC3C,uBAAuB;YAEvB,0BAA0B;YAE1B,0BAA0B;YAC1B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,cAAc;aACxB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;YAClD,eAAe;QACjB,CAAC;IACH,CAAC;CACF;AAxJD,sCAwJC","sourcesContent":["// [관리자]\n// 유저 목록 조회 - getUsers\n// 유저 상세 조회 - getUser\n// 유저 생성 - createUser\n// 유저 수정 - updateUser\n// 유저 삭제 - deleteUser\n\nimport { NextFunction, Request, Response } from \"express\";\nimport { UserService } from \"@/api/users/service/users.service.type\";\nimport { CryptoService } from \"@/api/common/services/crypto.service\";\n\nexport default class AdminUserController {\n  constructor(private _userService: UserService) {\n    this.getUsers = this.getUsers.bind(this);\n    this.getUser = this.getUser.bind(this);\n    this.createUser = this.createUser.bind(this);\n    this.updateUser = this.updateUser.bind(this);\n    this.deleteUser = this.deleteUser.bind(this);\n  }\n\n  /** 유저 목록 조회 (관리자) */\n  async getUsers(\n    req: Request<\n      adminGetUsersRequest[\"path\"],\n      adminGetUsersResponse,\n      adminGetUsersRequest[\"body\"],\n      adminGetUsersRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    try {\n      const users = await this._userService.getUsers();\n      // console.log(\"회원 목록 조회 완료\")\n      // res.send(users);\n      res.status(200).json({\n        message: \"관리자 회원 목록 조회 성공\",\n        data: users,\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"관리자 회원 목록 조회 실패\" });\n      next(error);\n    }\n  }\n\n  /** 유저 상세 조회 (관리자) */\n  async getUser(\n    req: Request<\n      adminGetUserRequest[\"path\"],\n      adminGetUserResponse,\n      adminGetUserRequest[\"body\"],\n      adminGetUserRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    try {\n      const { userId } = req.params;\n\n      const user = await this._userService.getUser(userId);\n\n      // console.log(\"회원 상세 조회 완료\")\n\n      // res.status(200).send(user);\n      res.status(200).json({\n        message: \"관리자 회원 상세 조회 성공\",\n        data: user,\n      });\n    } catch (error) {\n      res.status(404).json({ message: \"관리자 회원 상세 조회 실패\" });\n      // next(error);\n    }\n  }\n\n  /** 유저 생성 (관리자) */\n  async createUser(\n    req: Request<\n      adminCreateUserRequest[\"path\"],\n      adminCreateUserResponse,\n      adminCreateUserRequest[\"body\"],\n      adminCreateUserRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    try {\n      const { password } = req.body;\n\n      const { hashedPassword, salt } = CryptoService.encryptPassword(password);\n\n      const newUser = await this._userService.createUser({\n        ...req.body,\n        password: hashedPassword,\n        salt,\n      });\n      console.log(newUser)\n      // console.log(\"회원 생성 완료\")\n      // res.send(newUser);\n      res.status(200).json({\n        message: \"관리자 회원 생성 성공\",\n        data: newUser,\n      });\n    } catch (error) {\n      res.status(409).json({ message: \"관리자 회원 생성 실패\" });\n      // next(error);\n    }\n  }\n\n  /** 유저 수정 (관리자) */\n  async updateUser(\n    req: Request<\n      adminUpdateUserRequest[\"path\"],\n      adminUpdateUserResponse,\n      adminUpdateUserRequest[\"body\"],\n      adminUpdateUserRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    try {\n      const user = await this._userService.updateUser(req.params.userId, req.body);\n\n      // console.log(\"회원 수정 완료\")\n\n      // res.status(200).send(user);\n      res.status(200).json({\n        message: \"관리자 회원 수정 성공\",\n        data: user,\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: \"관리자 회원 수정 실패\" });\n      // next(error);\n    }\n  }\n\n  /** 유저 삭제 (관리자) */\n  async deleteUser(\n    req: Request<\n      adminDeleteUserRequest[\"path\"],\n      adminDeleteUserResponse,\n      adminDeleteUserRequest[\"body\"],\n      adminDeleteUserRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    try {\n      const { userId } = req.params;\n\n      await this._userService.deleteUser(userId);\n      // console.log(userId);\n\n      // console.log(\"회원 삭제 완료\")\n\n      // res.status(204).send();\n      res.status(200).json({\n        message: \"관리자 회원 삭제 성공\"\n      });\n    } catch (error) {\n      res.status(404).json({ message: \"관리자 회원 삭제 실패\" });\n      // next(error);\n    }\n  }\n}\n"]}