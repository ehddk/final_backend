{"version":3,"file":"mongooseUser.repository.js","sourceRoot":"","sources":["../../../../../src/api/users/repository/user/mongooseUser.repository.ts"],"names":[],"mappings":"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","sourcesContent":["import { UserRepository } from \"@/api/users/repository/user/user.repository\";\nimport { MongooseUser } from \"@/api/users/model/user.schema\";\n\nexport class MongooseUserRepository implements UserRepository {\n  async save(user: Omit<IUser, \"userId\">): Promise<IUser> {\n    const newUser = new MongooseUser(user);\n\n    await newUser.save();\n\n    return newUser;\n  }\n  async findAll(): Promise<IUser[]> {\n    const values = await MongooseUser.find()\n      .populate({\n        path: \"profile\",\n        populate: {\n          path: \"delivery\",\n          model: \"Delivery\",\n        },\n      })\n      .populate(\"cart\")\n      .exec();\n    // console.log(\"values\", values);\n    return values;\n  }\n\n  async findById(userId: string): Promise<IUser | null> {\n    try {\n      const fullUser = await MongooseUser.findById(userId)\n        .populate({\n          path: \"profile\",\n          populate: {\n            path: \"delivery\",\n            model: \"Delivery\",\n          },\n        })\n        .populate({\n          path: \"inquiries\",\n          populate: {\n            path: \"author\",\n            populate: {\n              path: \"profile\",\n            },\n          },\n        })\n        .populate({\n          path: \"orders\",\n          populate: [\n            {\n              path: \"userInfo\", // userInfo를 포함\n            },\n            {\n              path: \"orderItem\", // orderItem을 포함\n              populate: {\n                path: \"product\", // orderItem 내 product를 포함\n              },\n            },\n          ],\n        })\n        .populate({\n          path: \"cart\",\n          populate: {\n            path: \"cartItem\",\n            populate: {\n              path: \"product\",\n            },\n          },\n        })\n        .exec();\n      console.log(\"Full 유저:\", fullUser);\n      return fullUser;\n    } catch (error: any) {\n      const message = error.message.toString();\n      if (message.includes(\"Cast to ObjectId failed\")) {\n        return null;\n      }\n\n      throw error;\n    }\n    //   const findUser = await MongooseUser.findById(userId).populate(\n    //     \"profile\",\n    //     // \"cart\",\n    //     // \"orders\"\n    //   );\n\n    // return findUser ?? null;\n  }\n  async findByLoginId(loginId: string): Promise<IUser | null> {\n    const findUser = await MongooseUser.findOne({ loginId });\n\n    return findUser ?? null;\n  }\n  async findByEmail(email: string): Promise<IUser | null> {\n    const findUser = await MongooseUser.findOne({ email });\n\n    return findUser ?? null;\n  }\n  async update(userId: string, updateUserInfo: Partial<IUser>): Promise<void> {\n    await MongooseUser.findByIdAndUpdate(userId, updateUserInfo).populate(\n      \"profile\"\n    );\n\n    return;\n  }\n  async delete(userId: string): Promise<void> {\n    await MongooseUser.deleteOne({ _id: userId });\n\n    return;\n  }\n}\n"]}