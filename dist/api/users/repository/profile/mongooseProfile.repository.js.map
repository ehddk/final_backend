{"version":3,"file":"mongooseProfile.repository.js","sourceRoot":"","sources":["../../../../../src/api/users/repository/profile/mongooseProfile.repository.ts"],"names":[],"mappings":";;;;;;AAAA,4FAAmE;AAEnE,qEAAmE;AACnE,yDAAuD;AAEvD,MAAa,yBAAyB;IACpC,KAAK,CAAC,IAAI,CAAC,OAA6B;QACtC,MAAM,UAAU,GAAG,IAAI,gCAAe,CAAC,OAAO,CAAC,CAAC;QAEhD,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;QAExB,OAAO,UAAU,CAAC;IACpB,CAAC;IACD,KAAK,CAAC,OAAO;QACX,OAAO,MAAM,gCAAe,CAAC,IAAI,EAAE,CAAC;IACtC,CAAC;IACD,KAAK,CAAC,QAAQ,CAAC,MAAc;QAC3B,MAAM,OAAO,GAAG,MAAM,gCAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACvD,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,YAAY,CAAC,MAAa;QAC9B,MAAM,IAAI,GAAC,MAAM,0BAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC/C,OAAO,IAAI,EAAE,OAAO,IAAI,IAAI,CAAA;IAC9B,CAAC;IACD,KAAK,CAAC,MAAM,CACV,SAAiB,EACjB,iBAAoC;QAEpC,MAAM,OAAO,GAAG,MAAM,gCAAe,CAAC,iBAAiB,CACrD,SAAS,EACT,EAAE,IAAI,EAAG,iBAAiB,EAAE,EAC5B,EAAE,GAAG,EAAE,IAAI,EAAE;QACb,oBAAoB;SACrB,CAAC,IAAI,EAAE,CAAC;QAET,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QAClD,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,SAAiB;QAC5B,MAAM,gCAAe,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC;QAEpD,OAAO;IACT,CAAC;CACF;AAzCD,8DAyCC","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { ProfileRepository } from \"@/api/users/repository/profile/profile.repository\";\nimport { MongooseProfile } from \"@/api/users/model/profile.schema\";\nimport { MongooseUser } from \"../../model/user.schema\";\n\nexport class MongooseProfileRepository implements ProfileRepository {\n  async save(profile: Omit<IProfile, \"id\">): Promise<IProfile> {\n    const newProfile = new MongooseProfile(profile);\n\n    await newProfile.save();\n\n    return newProfile;\n  }\n  async findAll(): Promise<IProfile[]> {\n    return await MongooseProfile.find();\n  }\n  async findById(userId: string): Promise<IProfile | null> {\n    const profile = await MongooseProfile.findById(userId);\n    return profile;\n  }\n  async findByUserId(userId:string):Promise<IProfile | null>{\n    const user=await MongooseUser.findById(userId);\n    return user?.profile || null\n  }\n  async update(\n    profileId: string,\n    updateProfileInfo: Partial<IProfile>\n  ): Promise<IProfile> {\n    const results = await MongooseProfile.findByIdAndUpdate(\n      profileId,\n      { $set:  updateProfileInfo },\n      { new: true }\n      // updateProfileInfo\n    ).exec();\n\n    if (!results) {\n      throw new HttpException(404, \"프로필을 찾을 수 없습니다.\");\n    }\n\n    return results;\n  }\n  async delete(profileId: string): Promise<void> {\n    await MongooseProfile.deleteOne({ _id: profileId });\n\n    return;\n  }\n}\n"]}