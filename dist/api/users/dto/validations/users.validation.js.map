{"version":3,"file":"users.validation.js","sourceRoot":"","sources":["../../../../../src/api/users/dto/validations/users.validation.ts"],"names":[],"mappings":"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","sourcesContent":["import { REGEX } from \"@/api/common/validations\";\nimport * as yup from \"yup\";\n\nconst EMAIL_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n// 비밀번호 8~16자 이상이고 영문 숫자 포함 하고 대문자 1개는 꼭 들어가있어야하고, 특수문자도 1개 들어가있어야해.\nconst PASSWORD_REGEX =\n  /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*(),.?\":{}|<>])[A-Za-z\\d!@#$%^&*(),.?\":{}|<>]{8,16}$/;\n\n// 조건부 검증을 할때는 when을 사용하면 됩니다.\nconst withDrawUserBodyValidator = yup.object({\n  /** 탈퇴 사유 */\n  reason: yup\n    .string()\n    .oneOf([\n      \"불편해요\",\n      \"불만족이에요\",\n      \"더이상 사용안해요\",\n      \"기타 (직접 입력)\",\n    ])\n    .required(),\n  extraReason: yup.string().when(\"reason\", (reason, schema) => {\n    return reason.toString() === \"기타 (직접 입력)\"\n      ? schema.required(\"기타 사유는 필수 입력값입니다.\")\n      : schema;\n  }),\n});\n\nconst createUserBodyValidator = yup.object({\n  email: yup\n    .string()\n    .required(\"이메일은 필수 입력값입니다.\")\n    .matches(EMAIL_REGEX, \"이메일 형식이 올바르지 않습니다.\"),\n  // .matches(REGEX.EMAIL, \"이메일 형식이 올바르지 않습니다.\"),\n  password: yup\n    .string()\n    // .matches(\n    //   PASSWORD_REGEX,\n    //   \"비밀번호는 8~16자 이상이고, 대문자 1개 이상 그리고 영문 숫자 포함하고, 특수문자는 1개 이상이어야합니다.\"\n    // )\n    .optional(),\n  profile: yup.object({\n    birth: yup\n      .string()\n      .matches(/^\\d{4}-\\d{2}-\\d{2}$/, \"생년월일 형식이 올바르지 않습니다.\")\n      .optional(),\n    gender: yup\n      .string()\n      .oneOf([\"M\", \"F\"], \"성별은 남자는 M 여자는 F로 입력되어야 합니다.\")\n      .optional(),\n    firstName: yup.string().required(\"이름은 필수 입력값입니다.\"),\n    // firstName: yup.string().optional(),\n    lastName: yup.string().optional(),\n    thubmnail: yup.string().optional(),\n  }),\n});\n\nexport const createUserValidator = {\n  body: createUserBodyValidator,\n};\n\nconst updateUserBodyValidator = yup.object({\n  email: yup.string().matches(EMAIL_REGEX, \"이메일 형식이 올바르지 않습니다.\"),\n  // .matches(REGEX.EMAIL, \"이메일 형식이 올바르지 않습니다.\"),\n  password: yup\n    .string()\n    .matches(\n      PASSWORD_REGEX,\n      \"비밀번호는 8~16자 이상이고, 대문자 1개 이상 그리고 영문 숫자 포함하고, 특수문자는 1개 이상이어야합니다.\"\n    )\n    .optional(),\n  profile: yup.object({\n    id: yup.string(),\n    birth: yup\n      .string()\n      .matches(/^\\d{4}-\\d{2}-\\d{2}$/, \"생년월일 형식이 올바르지 않습니다.\")\n      .optional(),\n    gender: yup\n      .string()\n      .oneOf([\"M\", \"F\"], \"성별은 남자는 M 여자는 F로 입력되어야 합니다.\")\n      .optional(),\n    firstName: yup.string(),\n    lastName: yup.string().optional(),\n    thubmnail: yup.string().optional(),\n  }),\n});\n\nconst updateUserPathValidator = yup.object({\n  userId: yup\n    .string()\n    .matches(REGEX.EMPTY_VARIABLE_PATH, \"userId는 필수 입력값입니다.\"),\n});\n\nexport const updateUserValidator = {\n  body: updateUserBodyValidator,\n  params: updateUserPathValidator,\n};\n"]}