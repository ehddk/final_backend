{"version":3,"file":"users.service.js","sourceRoot":"","sources":["../../../../src/api/users/service/users.service.ts"],"names":[],"mappings":"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","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { UserResponseDTO } from \"@/api/users/dto/userResponse.dto\";\nimport { UserRepository } from \"@/api/users/repository/user/user.repository\";\nimport { UserService } from \"@/api/users/service/users.service.type\";\nimport { GetUserResponseDTO } from \"@/api/users/dto/getUserResponse.dto\";\nimport { GetUsersResponseDTO } from \"@/api/users/dto/getUsersResponse.dto\";\nimport { ProfileRepository } from \"@/api/users/repository/profile/profile.repository\";\nimport { CartRepository } from \"@/api/carts/repository/cart.repository\";\nimport mongoose from \"mongoose\";\n\nexport class UsersServiceImpl implements UserService {\n  constructor(\n    private readonly _userRepository: UserRepository,\n    private readonly _profileRepository: ProfileRepository,\n    private readonly _cartRepository: CartRepository\n  ) {}\n\n  async createUser(params: Omit<IUser, \"userId\">): Promise<UserResponseDTO> {\n    // 트랙잭션으로 중복 막기\n    // 모두 성공적으로 처리되거나 혹은 그렇지 못했을 경우 롤백.\n\n    try{\n      const existingUserByEmail = await this._userRepository.findByEmail(params.email);\n      console.log('이미 있다',existingUserByEmail)\n      if (existingUserByEmail) {\n        throw new HttpException(409, \"이미 존재하는 이메일입니다.\");\n      }\n       // 2. 로그인 ID 중복 체크도 필요하다면\n    const existingUserById = await this._userRepository.findByLoginId(params.loginId);\n    if (existingUserById) {\n      throw new HttpException(409, \"이미 존재하는 아이디입니다.\");\n    }\n\n    \n      \n      const profile = await this._profileRepository.save(params.profile);\n      const cart = await this._cartRepository.save(params.cart);\n      const user = await this._userRepository.save({\n        ...params,\n        profile,\n        cart,\n      });\n\n      await this._cartRepository.update(cart.id, {\n        userId: user.id, // userId 연결\n      });\n      return new UserResponseDTO(user);\n    }catch(error){ \n      throw error;\n    }\n  }\n  async getUsers(): Promise<GetUsersResponseDTO[]> {\n    const users = await this._userRepository.findAll();\n   // console.log(\"유저 찾기\", users);\n    const newList = await Promise.all(\n      users.map((user) => new GetUsersResponseDTO(user))\n    );\n\n    return newList;\n  }\n  async getUser(userId: string): Promise<GetUserResponseDTO | null> {\n    const user = await this._userRepository.findById(userId);\n\n    if (!user) throw new HttpException(404, \"유저를 찾을 수 없습니다.\");\n\n    const dtoUser = await new GetUserResponseDTO(user);\n\n    return dtoUser;\n  }\n\n  async updateUser(userId: string, params: Partial<IUser>): Promise<void> {\n    const findUser = await this._userRepository.findById(userId);\n\n    if (!findUser) throw new HttpException(404, \"유저를 찾을 수 없습니다.\");\n\n    const updateProfile = await this._profileRepository.update(\n      findUser.profile.id,\n      params?.profile || {}\n    );\n\n    await this._userRepository.update(userId, {\n      ...params,\n      profile: updateProfile,\n    });\n\n    return;\n  }\n\n  async deleteUser(userId: string): Promise<void> {\n    const findUser = await this._userRepository.findById(userId);\n\n    if (!findUser) throw new HttpException(404, \"유저를 찾을 수 없습니다.\");\n\nconsole.log(\"start\")\n\nconsole.log(await Promise.allSettled([\n  this._profileRepository.delete(findUser.profile?.id),\n  this._cartRepository.delete(findUser.cart?.id),\n  this._userRepository.delete(findUser.id),\n]))\n\nconsole.log(\"end\")\n\n    return;\n  }\n\n  async deleteUsers(ids: string[]): Promise<void> {\n    await Promise.all(\n      (ids || []).map((userId) => this._userRepository.delete(userId))\n    );\n\n    return;\n  }\n}\n"]}