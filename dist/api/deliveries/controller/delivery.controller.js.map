{"version":3,"file":"delivery.controller.js","sourceRoot":"","sources":["../../../../src/api/deliveries/controller/delivery.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport { DeliveryService } from \"../service/delivery.service.type\";\nimport HttpException from \"@/api/common/exceptions/http.exception\";\n\nexport default class DeliveryController{\n  private readonly _deliveryService:DeliveryService;\n  constructor(_deliveryService:DeliveryService){\n    this._deliveryService= _deliveryService;\n\n    this.getDeliveries=this.getDeliveries.bind(this);\n    this.getDeliveryDetail=this.getDeliveryDetail.bind(this);\n    this.createDelivery=this.createDelivery.bind(this);\n    this.updateDelivery=this.updateDelivery.bind(this);\n    this.deleteDelivery=this.deleteDelivery.bind(this);\n  }\n\n    /**배송지 목록 조회 */\n    async getDeliveries(\n        req:Request<getDeliveriesRequest[\"path\"],\n        getDeliveriesResponse,\n        getDeliveriesRequest[\"body\"],\n        getDeliveriesRequest[\"params\"]\n       >,\n        res:Response,\n        next:NextFunction\n    ){\n      //const {userId}=req.params;\n      try{\n        const userId = req.user.userId;\n      const values=await this._deliveryService.getDeliveries(userId);\n      res.send(values)\n      }\n      catch(error){\n        // throw new HttpException(404,'배송지 조회 중 오류가 발생하였습니다.')\n        next(error)\n      }\n \n    }\n     /* 배송지 상세 조회 */\n    async getDeliveryDetail(\n      req:Request<getDeliveryDetailRequest[\"path\"],\n      getDeliveryDetailResponse,\n      getDeliveryDetailRequest[\"body\"],\n      getDeliveryDetailRequest[\"params\"]\n     >,\n      res:Response,\n      next:NextFunction\n    ){\n      const userId = req.user.userId;\n      const {deliveryId}=req.params;\n      try{\n        const value=await this._deliveryService.getDeliveryDetail(userId,deliveryId);\n        // console.log('value인줄',value)\n        return !value \n        ? res.status(404).send({ message: '배송지를 찾을 수 없습니다.' })\n        : res.send(value);\n        res.send(value) //처음에 return value로 했다가 무한로딩됐음.생각해보니까 res.send를 사용해야 클라이언트에 보내짐! \n      }catch(error){\n        next(error)\n      }\n    }\n\n      /**배송지 생성 */\n      /**순서 바꾸기 전 오류 */\n    // async createDelivery(\n    //     req:Request<createDeliveryRequest[\"path\"],\n    //     createDeliveryRequest[\"body\"],\n    //     createDeliveryRequest[\"params\"],\n    //     createDeliveryResponse>,\n    //     res:Response,\n    //     next:NextFunction\n    // ){\n    //     const{name,postalCode,defaultAddress,detailAddress,number}=req.body;\n    //     try{\n    //       const delivery = await this._deliveryService.createDelivery({\n    //         name,postalCode,defaultAddress,detailAddress,number\n    //       })\n    //     }\n    // }\n      async createDelivery(\n        req:Request<createDeliveryRequest[\"params\"],\n        createDeliveryResponse,\n        createDeliveryRequest[\"body\"],\n        createDeliveryRequest[\"path\"]>,\n        res:Response,\n        next:NextFunction\n    ){\n        \n        const{name,postalCode,defaultAddress,detailAddress,number}=req.body;\n        try{\n           // const {userId}=req.params;\n           const userId = req.user.userId;\n           console.log('userIdDELi',userId)\n          const delivery = await this._deliveryService.createDelivery(\n           userId,\n            {\n             name,postalCode,\n             defaultAddress,detailAddress,\n             number\n          });\n          res.send(delivery);\n          console.log('deve',delivery)\n        }catch(error){\n          next(error)\n        }\n    }\n      /**배송지 수정 */\n      async updateDelivery(\n        req:Request<\n        updateDeliveryRequest[\"params\"], \n        updateDeliveryResponse,       \n        updateDeliveryRequest[\"body\"],    \n        updateDeliveryRequest[\"path\"] \n       >,\n        res:Response,\n        next:NextFunction\n      ){\n        const {deliveryId}=req.params;\n        try{\n          const userId = req.user.userId;\n          await this._deliveryService.updateDelivery(userId,deliveryId,req.body);\n          //res.status(204).json();\n          res.send('수정 성공')\n        }catch(error){\n          next(error)\n      }\n       \n      }\n      /**배송지 삭제 */\n      async deleteDelivery(\n        req:Request<\n        deleteDeliveryRequest[\"path\"],\n        deleteDeliveryRequest[\"body\"],\n        deleteDeliveryRequest[\"params\"],\n        deleteDeliveryResponse>,\n        res:Response,\n        next:NextFunction\n      ){\n        const {deliveryId}=req.params;\n        try{\n          const userId = req.user.userId;\n          await this._deliveryService.deleteDelivery(userId,deliveryId);\n          res.send(\"삭제 성공\")\n        }catch(error){\n          next(error)\n        }\n      }\n\n}"]}