{"version":3,"file":"mongooseDelivery.repository.js","sourceRoot":"","sources":["../../../../src/api/deliveries/repository/mongooseDelivery.repository.ts"],"names":[],"mappings":"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","sourcesContent":["import { IDelivery } from \"../@types/delivery.type\";\nimport { DeliveryRepository } from \"./delivery.repository\";\nimport { MongooseDelivery } from \"../model/delivery.schema\";\nimport HttpException from \"@/api/common/exceptions/http.exception\";\nimport mongoose from \"mongoose\";\nimport { MongooseProfile } from \"@/api/users/model/profile.schema\";\nimport { MongooseUser } from \"@/api/users/model/user.schema\";\n\nexport class MongooseDeliveryRepository implements DeliveryRepository{\n\n    async save(userId: string,delivery:Omit<IDelivery,\"id\" | \"userId\">):Promise<IDelivery>{\n\n        try{\n            const newDelivery = new MongooseDelivery({\n                userId,\n                ...delivery\n            });\n            await newDelivery.save();\n            return newDelivery;\n    }catch(error){\n        throw new HttpException(500,'배송지 등록중에 오류 발생')\n    }\n    }\n    async findAll(userId:string):Promise<IDelivery[]>{\n      //return await this.MongooseDelivery.find({ user: userId }).lean();\n         const deliveries=await MongooseDelivery.find({ userId: userId });\n       return deliveries;\n    }\n\n    async findById(userId: string,deliveryId: string): Promise<IDelivery | null> {\n      try{\n        console.log('Finding delivery with:', { userId, deliveryId });\n        const user=await MongooseUser.findById(userId)\n          .populate({\n            path:'profile',\n            populate:{\n              path:'delivery',\n              model: 'Delivery' \n            }\n          })\n          .exec();\n       console.log('Found user with profile:', user);\n        //   if (!user?.profile.delivery) {\n        //     console.log('No delivery found in profile');\n        //     return null;\n        // }\n       // console.log('user?,.prof',user?.profile.delivery)\n        const delivery= user?.profile.delivery.find(\n          item=>item._id.toString() === deliveryId\n        )\n        //console.log('해당 배송지 내용',delivery)\n        // const delivery= user.profile.delivery.find(\n        //   item=>\n        // )\n        // const delivery= user\n        // console.log('devsdsd',delivery)\n        // return delivery || null;\n          if(!delivery){\n            throw new Error('해당 배송지ID가 없습니다. ')\n          }\n      return delivery || null;\n      }\n      catch(error){\n        console.error('Error in findById:', error);\n            throw error;\n      }\n         \n    }\n\n    async update(userId: string,deliveryId:string,updateDeliveryInfo:Partial<IDelivery>):Promise<IDelivery>{\n        const results=await MongooseDelivery.findOneAndUpdate({ _id: deliveryId,userId:userId },updateDeliveryInfo);\n        console.log('resuttt',results)\n        console.log(\"deliveryId:\", deliveryId, \"userId:\", userId);\n\n        if(!results){\n            throw new HttpException(404,\"해당 배송지 수정을 할 수 없습니다.\")\n        }\n        return results;\n    }\n    async delete(userId:string,deliveryId:string):Promise<void>{\n        try {\n            const result = await MongooseDelivery.deleteOne({\n              _id: new mongoose.Types.ObjectId(deliveryId),\n              userId: userId \n            });\n        \n            // 삭제된 문서가 없는 경우 처리\n            if (result.deletedCount === 0) {\n              throw new Error('배송지를 찾을 수 없습니다.');\n            }\n        \n          } catch (error) {\n            if (error instanceof mongoose.Error.CastError) {\n              throw new Error('잘못된 배송지 ID 형식입니다.');\n            }\n            throw error;\n          }\n    }\n}"]}