{"version":3,"file":"delivery.service.js","sourceRoot":"","sources":["../../../../src/api/deliveries/service/delivery.service.ts"],"names":[],"mappings":"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","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { IDelivery } from \"../@types/delivery.type\";\nimport { DeliveryResponseDTO } from \"../dto/deliveryResponse.dto\";\nimport { DeliveryRepository } from \"../repository/delivery.repository\";\nimport { DeliveryService } from \"./delivery.service.type\";\nimport { ProfileRepository } from \"@/api/users/repository/profile/profile.repository\";\nimport { UserRepository } from \"@/api/users/repository/user/user.repository\";\nimport { MongooseProfile } from \"@/api/users/model/profile.schema\";\n\n\nexport class DeliveryServicesImpl implements DeliveryService{\n\n    private readonly _deliveryRepository:DeliveryRepository;\n    private readonly _profileRepository:ProfileRepository;\n    private _userRepository: UserRepository;\n    constructor(deliveryRepository:DeliveryRepository,profileRepository:ProfileRepository,userRepository:UserRepository){\n        this._deliveryRepository = deliveryRepository;\n        this._profileRepository = profileRepository;\n        this._userRepository = userRepository;\n    }\n    /**배송지 목록 조회 */\n    async getDeliveries(userId: string):Promise<DeliveryResponseDTO[]>{\n        try{\n            const values=await this._deliveryRepository.findAll(userId);\n\n            return values;\n        }catch(error){\n            throw  new Error(`배송지 목록 조회 중 오류가 발생했습니다`);\n        }\n    }\n    async getDeliveryDetail(userId:string,deliveryId:string):Promise<DeliveryResponseDTO | null>{\n        try{\n            if(!deliveryId){\n                throw new Error('해당 배송지ID가 없습니다.')\n            }\n            const delivery = await this._deliveryRepository.findById(userId,deliveryId);\n            if(!delivery){\n                throw new HttpException(404,\"해당 배송지를 찾을 수 없습니다.\")\n            }\n            return delivery || null;\n        }catch(error){\n            throw  new Error(`배송지 상세 조회 중 오류가 발생했습니다`);\n        }\n    }\n    /**배송지 등록 */\n    async createDelivery(userId: string,delivery:Omit<IDelivery,\"_id\">):Promise<DeliveryResponseDTO>{\n        console.log('userId',userId)\n        try{\n            //유저 찾기\n            const user = await this._userRepository.findById(userId);\n             if (!user) {\n            throw new Error('해당 유저를 찾을 수 없습니다.');\n        }\n         //   console.log('유저 찾기 :',user)\n            //배송지 생성하기\n            const newDelivery=await this._deliveryRepository.save(\n                userId,\n                delivery\n            )\n          //  console.log('new',newDelivery)\n           // console.log('배송지의 userId:', newDelivery.userId);\n            //user profile 찾기\n            // const userProfile = await this._profileRepository.findByUserId(userId);\n            // console.log('userprofile의 id :',userProfile)\n            // console.log('user의 id : ',userProfile?.id)\n            // if(!userProfile){\n            //     throw new Error('해당 유저가 없습니다.')\n            // }\n         \n            // //profile에 delivery업데이트\n            // await this._profileRepository.update(userProfile.id,{\n            //     delivery:newDelivery.id\n            // })\n            const updatedProfile = await MongooseProfile.findByIdAndUpdate(\n                user.profile.id,\n                \n                { $push: { delivery:newDelivery} }, //delivery에 새로운배송지 등록.이때 $set 생략해도됨!!\n                { new: true } // 새로운 내용을 반환\n            ).exec();\n           // console.log('user.profile.delivery',updatedProfile)\n            //console.log('Updated profile:', updatedProfile);\n            return newDelivery;\n        }catch(error){\n            throw new Error('배송지 등록 중 오류 발생하였습니다.')\n        }\n    }\n    /**배송지 수정 */\n    async updateDelivery(userId:string,deliveryId:string,updatedDeliveryInfo:Omit<IDelivery,\"id\">):Promise<void>{\n       try{ //1.유저 찾기\n        const user=await this._userRepository.findById(userId)\n        if (!user) {\n            throw new Error('해당 유저를 찾을 수 없습니다.');\n        }\n       // console.log('수정 ㅈ중 유저',user)\n        //2.배송지 찾기\n        const findDelivery = await this._deliveryRepository.findById(userId, deliveryId);\n        if (!findDelivery) {\n            throw new Error('해당 배송지를 찾을 수 없습니다.');\n        }\n        //console.log('수정 ㅈ중 배송지 찾기',findDelivery)\n        //3.새로운 배송지로 수정하기\n        await this._deliveryRepository.update(userId,deliveryId,updatedDeliveryInfo);\n        // const updatedDelivery = await this._deliveryRepository.update(\n        //     userId,\n        //     deliveryId,\n        //     updatedDeliveryInfo\n        // )    \n        // return;\n        \n    }catch(error){\n        console.error('배송지 수정 중 에러:', error);\n        throw new Error('배송지 수정 중 오류 발생!!')\n    }\n}\n    /**배송지 삭제 */\n    async deleteDelivery(userId: string,deliveryId:string):Promise<void>{\n        await this._deliveryRepository.delete(userId,deliveryId);\n\n    }\n}"]}