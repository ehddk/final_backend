{"version":3,"file":"orderItems.service.js","sourceRoot":"","sources":["../../../../src/api/orderItems/service/orderItems.service.ts"],"names":[],"mappings":";AAAA,gFAAgF;AAChF,qFAAqF;AACrF,sFAAsF;AACtF,wFAAwF;AACxF,sEAAsE;AACtE,8EAA8E;AAC9E,oFAAoF;AAEpF,oEAAoE;AACpE,gEAAgE;AAChE,wDAAwD;AACxD,4DAA4D;AAC5D,iBAAiB;AACjB,gDAAgD;AAChD,wCAAwC;AACxC,2CAA2C;AAC3C,QAAQ;AACR,uDAAuD;AACvD,+CAA+C;AAC/C,mDAAmD;AACnD,MAAM;AAEN,2BAA2B;AAC3B,uBAAuB;AACvB,wCAAwC;AACxC,uCAAuC;AACvC,mEAAmE;AAEnE,oBAAoB;AACpB,wDAAwD;AACxD,QAAQ;AACR,wBAAwB;AACxB,8CAA8C;AAC9C,8BAA8B;AAC9B,mCAAmC;AACnC,wBAAwB;AACxB,2DAA2D;AAC3D,QAAQ;AACR,yEAAyE;AACzE,wCAAwC;AACxC,sBAAsB;AACtB,2DAA2D;AAC3D,QAAQ;AACR,yCAAyC;AACzC,sBAAsB;AACtB,2CAA2C;AAC3C,2BAA2B;AAC3B,iBAAiB;AACjB,sCAAsC;AACtC,0CAA0C;AAC1C,4CAA4C;AAC5C,SAAS;AAET,8BAA8B;AAC9B,mEAAmE;AACnE,kBAAkB;AAClB,qBAAqB;AACrB,SAAS;AAET,+CAA+C;AAC/C,iDAAiD;AACjD,4BAA4B;AAC5B,qDAAqD;AACrD,qCAAqC;AACrC,UAAU;AACV,uDAAuD;AACvD,MAAM;AAEN,6DAA6D;AAC7D,oEAAoE;AACpE,iFAAiF;AACjF,MAAM;AACN,8BAA8B;AAC9B,0BAA0B;AAC1B,8CAA8C;AAC9C,+EAA+E;AAE/E,wBAAwB;AACxB,2DAA2D;AAC3D,QAAQ;AAER,kDAAkD;AAClD,MAAM;AACN,2BAA2B;AAC3B,2BAA2B;AAC3B,2DAA2D;AAC3D,uBAAuB;AACvB,6EAA6E;AAE7E,cAAc;AACd,MAAM;AACN,gEAAgE;AAChE,2DAA2D;AAC3D,MAAM;AACN,IAAI","sourcesContent":["// import { UserRepository } from \"@/api/users/repository/user/user.repository\";\n// import { OrderItemResponseDTO } from \"@/api/orderItems/dto/orderItemResponse.dto\";\n// import { OrderItemRepository } from \"@/api/orders/repository/orderItem.repository\";\n// import { OrderItemsService } from \"@/api/orderItems/service/orderItems.service.type\";\n// import HttpException from \"@/api/common/exceptions/http.exception\";\n// import { OrderRepository } from \"@/api/orders/repository/order.repository\";\n// import { ProductRepository } from \"@/api/products/repository/product.repository\";\n\n// export class OrderItemsServiceImpl implements OrderItemsService {\n//   private readonly _orderItemRepository: OrderItemRepository;\n//   private readonly _orderRepository: OrderRepository;\n//   private readonly _productRepository: ProductRepository;\n//   constructor(\n//     orderItemRepository: OrderItemRepository,\n//     orderRepository: OrderRepository,\n//     productRepository: ProductRepository\n//   ) {\n//     this._orderItemRepository = orderItemRepository;\n//     this._orderRepository = orderRepository;\n//     this._productRepository = productRepository;\n//   }\n\n//   async createOrderItem(\n//     orderId: string,\n//     orderItem: Omit<IOrderItem, \"id\">\n//   ): Promise<OrderItemResponseDTO> {\n//     const order = await this._orderRepository.findById(orderId);\n\n//     if (!order) {\n//       throw new HttpException(404, \"주문을 찾을 수 없습니다.\");\n//     }\n//     const productId =\n//       typeof orderItem.product === \"string\"\n//         ? orderItem.product\n//         : orderItem.product?.id;\n//     if (!productId) {\n//       throw new HttpException(400, \"상품 ID가 유효하지 않습니다.\");\n//     }\n//     const product = await this._productRepository.findById(productId);\n//     console.log(\"product:\", product);\n//     if (!product) {\n//       throw new HttpException(404, \"해당 상품를 찾을 수 없습니다.\");\n//     }\n//     const newOrderItem: IOrderItem = {\n//       ...orderItem,\n//       id: \"\", // MongoDB에서 자동 생성될 ID로 대체\n//       orderId: order.id,\n//       product,\n//       quantity: orderItem.quantity,\n//       totalPrice: orderItem.totalPrice,\n//       orderItemStatus: \"PAYMENT_PENDING\",\n//     };\n\n//     // 데이터베이스에 새로운 주문 항목 저장\n//     const savedOrderItem = await this._orderItemRepository.save(\n//       order.id,\n//       newOrderItem\n//     );\n\n//     const updatedOrderItem = order.orderItem\n//       ? order.orderItem.concat(savedOrderItem)\n//       : [savedOrderItem];\n//     await this._orderRepository.update(order.id, {\n//       orderItem: updatedOrderItem,\n//     });\n//     return new OrderItemResponseDTO(savedOrderItem);\n//   }\n\n//   async getOrderItems(): Promise<OrderItemResponseDTO[]> {\n//     const orderItems = await this._orderItemRepository.findAll();\n//     return orderItems.map((orderItem) => new OrderItemResponseDTO(orderItem));\n//   }\n//   async getOrderItemDetail(\n//     orderItemId: string\n//   ): Promise<OrderItemResponseDTO | null> {\n//     const orderItem = await this._orderItemRepository.findById(orderItemId);\n\n//     if (!orderItem) {\n//       throw new HttpException(404, \"주문 상품을 찾을 수 없습니다.\");\n//     }\n\n//     return new OrderItemResponseDTO(orderItem);\n//   }\n//   async updateOrderItem(\n//     orderItemId: string,\n//     updatedOrderItem: Omit<IOrderItem, \"id\" | \"product\">\n//   ): Promise<void> {\n//     await this._orderItemRepository.update(orderItemId, updatedOrderItem);\n\n//     return;\n//   }\n//   async deleteOrderItem(orderItemId: string): Promise<void> {\n//     await this._orderItemRepository.delete(orderItemId);\n//   }\n// }\n"]}