{"version":3,"file":"authCookieRole.middleware.js","sourceRoot":"","sources":["../../../../src/__api/common/middlewares/authCookieRole.middleware.ts"],"names":[],"mappings":";;;;;;AACA,kFAAyD;AACzD,yDAAqD;AAErD,mBAAmB;AACZ,MAAM,wBAAwB,GAAG,CAAC,KAAiB,EAAE,EAAE;IAC5D,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QACzD,IAAI,CAAC;YACH,kBAAkB;YAClB,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC;YAEtC,oBAAoB;YACpB,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;YAC5C,CAAC;YAED,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAE7C,oBAAoB;YACpB,MAAM,OAAO,GAAG,wBAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAEzD,oBAAoB;YACpB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;gBAClC,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;YAC5C,CAAC;YAED,GAAG,CAAC,IAAI,GAAG;gBACT,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,IAAI,EAAE,OAAO,CAAC,IAAI;aACnB,CAAC;YAEF,IAAI,EAAE,CAAC;QACT,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,OAAO,GAAG,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAEnD,IAAI,OAAO,EAAE,CAAC;gBACZ,GAAG;qBACA,MAAM,CAAC,GAAG,CAAC;qBACX,QAAQ,CACP,8BAA8B,GAAG,CAAC,WAAW,IAAI,cAAc,EAAE,CAClE,CAAC;gBAEJ,OAAO;YACT,CAAC;YAED,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,wBAAwB,GAAG,CAAC,WAAW,IAAI,EAAE,EAAE,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC,CAAC;AACJ,CAAC,CAAC;AA3CW,QAAA,wBAAwB,4BA2CnC","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport HttpException from \"../exceptions/http.exception\";\nimport { JwtService } from \"../services/jwt.service\";\n\n/** 인증 & 인가 미들웨어 */\nexport const authCookieRoleMiddleware = (roles: RoleType[]) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    try {\n      // 헤더에서 토큰을 가져옵니다.\n      const token = req.cookies.accessToken;\n\n      // 토큰이 없으면 에러를 던집니다.\n      if (!token) {\n        throw new HttpException(401, \"토큰이 없습니다.\");\n      }\n\n      const tokenValue = token.split(\"Bearer \")[1];\n\n      // 페이로드에서 역할을 확인합니다.\n      const payload = JwtService.verifyAccessToken(tokenValue);\n\n      // 역할이 없으면 에러를 던집니다.\n      if (!roles.includes(payload.role)) {\n        throw new HttpException(403, \"권한이 없습니다.\");\n      }\n\n      req.user = {\n        userId: payload.userId,\n        role: payload.role,\n      };\n\n      next();\n    } catch (error: any) {\n      const isAdmin = req.originalUrl.includes(\"/admin\");\n\n      if (isAdmin) {\n        res\n          .status(302)\n          .redirect(\n            `/admin/auth/login?redirect=${req.originalUrl || \"/admin/posts\"}`\n          );\n\n        return;\n      }\n\n      res.status(302).redirect(`/auth/login?redirect=${req.originalUrl || \"\"}`);\n    }\n  };\n};\n"]}