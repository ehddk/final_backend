{"version":3,"file":"posts.router.js","sourceRoot":"","sources":["../../../../src/__api/posts/router/posts.router.ts"],"names":[],"mappings":";;;;;AAAA,sDAA8B;AAC9B,+FAAsE;AACtE,qEAAqE;AACrE,iFAGqD;AACrD,0FAA0E;AAC1E,4FAAwF;AACxF,iGAA6F;AAC7F,iDAAgD;AAChD,uCAAyC;AACzC,sFAAkF;AAClF,0FAA0F;AAC1F,MAAM,UAAU,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEpC,MAAM,WAAW,GAAG;IAClB,cAAc;IACd,SAAS,EAAE,YAAY;IACvB,cAAc;IACd,QAAQ,EAAE,oBAAoB;IAC9B,WAAW;IACX,WAAW,EAAE,YAAY;IACzB,WAAW;IACX,WAAW,EAAE,oBAAoB;IACjC,WAAW;IACX,WAAW,EAAE,oBAAoB;CACzB,CAAC;AAEX,MAAM,eAAe,GAAG,IAAI,0BAAe,CACzC,IAAI,gCAAgB,CAClB,IAAI,gDAAsB,EAAE,EAC5B,IAAI,gDAAsB,EAAE,CAC7B,CACF,CAAC;AAEF,UAAU,CAAC,GAAG,CACZ,IAAA,uBAAW,EAAC,WAAW,CAAC,SAAS,EAAE,sBAAY,CAAC,SAAS,CAAC,EAC1D,IAAA,gCAAQ,EAAC,mCAAiB,CAAC,EAC3B,eAAe,CAAC,QAAQ,CACzB,CAAC;AACF,UAAU,CAAC,GAAG,CACZ,IAAA,uBAAW,EAAC,WAAW,CAAC,QAAQ,EAAE,sBAAY,CAAC,SAAS,CAAC,EACzD,IAAA,gCAAQ,EAAC,wCAAsB,CAAC,EAChC,gDAAwB,EACxB,eAAe,CAAC,aAAa,CAC9B,CAAC;AACF,UAAU,CAAC,IAAI,CACb,IAAA,uBAAW,EAAC,WAAW,CAAC,WAAW,EAAE,sBAAY,CAAC,SAAS,CAAC,EAC5D,wCAAkB,EAClB,eAAe,CAAC,UAAU,CAC3B,CAAC;AAEF,UAAU,CAAC,GAAG,CACZ,IAAA,uBAAW,EAAC,WAAW,CAAC,WAAW,EAAE,sBAAY,CAAC,SAAS,CAAC,EAC5D,wCAAkB,EAClB,eAAe,CAAC,UAAU,CAC3B,CAAC;AAEF,UAAU,CAAC,MAAM,CACf,IAAA,uBAAW,EAAC,WAAW,CAAC,WAAW,EAAE,sBAAY,CAAC,SAAS,CAAC,EAC5D,wCAAkB,EAClB,eAAe,CAAC,UAAU,CAC3B,CAAC;AAEF,kBAAe,UAAU,CAAC","sourcesContent":["import express from \"express\";\nimport PostsController from \"@/api/posts/controller/posts.controller\";\nimport { PostsServiceImpl } from \"@/api/posts/service/posts.service\";\nimport {\n  getPostDetailValidator,\n  getPostsValidator,\n} from \"@/api/posts/dto/validations/post.validation\";\nimport { validate } from \"@/api/common/middlewares/validation.middleware\";\nimport { MongoosePostRepository } from \"@/api/posts/repository/mongoosePost.repository\";\nimport { MongooseUserRepository } from \"@/api/users/repository/user/mongooseUser.repository\";\nimport { extractPath } from \"@/utils/path.util\";\nimport { ROUTES_INDEX } from \"@/routers\";\nimport { authUserMiddleware } from \"@/api/common/middlewares/authUser.middleware\";\nimport { authCookieViewMiddleware } from \"@/api/common/middlewares/authCookie.middleware\";\nconst postRouter = express.Router();\n\nconst POST_ROUTES = {\n  /** 글 목록 조회 */\n  GET_POSTS: `/api/posts`,\n  /** 글 싱세 조회 */\n  GET_POST: `/api/posts/:postId`,\n  /** 글 생성 */\n  CREATE_POST: `/api/posts`,\n  /** 글 수정 */\n  UPDATE_POST: `/api/posts/:postId`,\n  /** 글 삭제 */\n  DELETE_POST: `/api/posts/:postId`,\n} as const;\n\nconst postsController = new PostsController(\n  new PostsServiceImpl(\n    new MongoosePostRepository(),\n    new MongooseUserRepository()\n  )\n);\n\npostRouter.get(\n  extractPath(POST_ROUTES.GET_POSTS, ROUTES_INDEX.POSTS_API),\n  validate(getPostsValidator),\n  postsController.getPosts\n);\npostRouter.get(\n  extractPath(POST_ROUTES.GET_POST, ROUTES_INDEX.POSTS_API),\n  validate(getPostDetailValidator),\n  authCookieViewMiddleware,\n  postsController.getPostDetail\n);\npostRouter.post(\n  extractPath(POST_ROUTES.CREATE_POST, ROUTES_INDEX.POSTS_API),\n  authUserMiddleware,\n  postsController.createPost\n);\n\npostRouter.put(\n  extractPath(POST_ROUTES.UPDATE_POST, ROUTES_INDEX.POSTS_API),\n  authUserMiddleware,\n  postsController.updatePost\n);\n\npostRouter.delete(\n  extractPath(POST_ROUTES.DELETE_POST, ROUTES_INDEX.POSTS_API),\n  authUserMiddleware,\n  postsController.deletePost\n);\n\nexport default postRouter;\n"]}