{"version":3,"file":"posts.service.js","sourceRoot":"","sources":["../../../../src/__api/posts/service/posts.service.ts"],"names":[],"mappings":";;;;;;AACA,uEAAmE;AAGnE,4FAAmE;AAEnE,MAAa,gBAAgB;IACV,eAAe,CAAiB;IAChC,eAAe,CAAiB;IACjD,YAAY,cAA8B,EAAE,cAA8B;QACxE,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,UAAU,CACd,MAAc,EACd,IAAgC;QAEhC,SAAS;QACT,eAAe;QACf,wBAAwB;QACxB,0BAA0B;QAC1B,uCAAuC;QAEvC,SAAS;QACT,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE3D,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QAClD,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YAC9C,GAAG,IAAI;YACP,MAAM;SACP,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QAE/C,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;YAC3C,KAAK,EAAE,QAAQ;SAChB,CAAC,CAAC;QAEH,OAAO,IAAI,kCAAe,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC;IACD,KAAK,CAAC,QAAQ,CAAC,EACb,KAAK,EACL,MAAM,GAIP;QAMC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC;YAC7D,KAAK;YACL,MAAM;SACP,CAAC,CAAC;QAEH,OAAO;YACL,UAAU,EAAE,KAAK,CAAC,UAAU;YAC5B,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,kCAAe,CAAC,IAAI,CAAC,CAAC;YAC/D,IAAI,EAAE,KAAK,CAAC,IAAI;SACjB,CAAC;IACJ,CAAC;IACD,KAAK,CAAC,aAAa,CAAC,MAAc;QAChC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAEzD,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QAClD,CAAC;QAED,OAAO,IAAI,kCAAe,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IACD,KAAK,CAAC,UAAU,CACd,MAAc,EACd,WAAuC;QAEvC,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAEvD,OAAO;IACT,CAAC;IACD,KAAK,CAAC,UAAU,CAAC,MAAc;QAC7B,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;CACF;AAlFD,4CAkFC","sourcesContent":["import { UserRepository } from \"@/api/users/repository/user/user.repository\";\nimport { PostResponseDTO } from \"@/api/posts/dto/postResponse.dto\";\nimport { PostRepository } from \"@/api/posts/repository/post.repository\";\nimport { PostsService } from \"@/api/posts/service/posts.service.type\";\nimport HttpException from \"@/api/common/exceptions/http.exception\";\n\nexport class PostsServiceImpl implements PostsService {\n  private readonly _postRepository: PostRepository;\n  private readonly _userRepository: UserRepository;\n  constructor(postRepository: PostRepository, userRepository: UserRepository) {\n    this._postRepository = postRepository;\n    this._userRepository = userRepository;\n  }\n\n  async createPost(\n    userId: string,\n    post: Omit<IPost, \"id\" | \"user\">\n  ): Promise<PostResponseDTO> {\n    // 게시글 생성\n    // 1. 작성자를 찾는다.\n    // 2. 작성자가 없으면 에러를 던져준다.\n    // 3. 작성자가 있으면, 게시글을 생성한다.\n    // 3-1. 게시글을 생성할때 author에 찾은 작성자를 넣어준다.\n\n    // 작성자 찾기\n    const author = await this._userRepository.findById(userId);\n\n    if (!author) {\n      throw new HttpException(404, \"작성자를 찾을 수 없습니다.\");\n    }\n\n    const newPost = await this._postRepository.save({\n      ...post,\n      author,\n    });\n\n    const newPosts = author.posts?.concat(newPost);\n\n    await this._userRepository.update(author.id, {\n      posts: newPosts,\n    });\n\n    return new PostResponseDTO(newPost);\n  }\n  async getPosts({\n    limit,\n    offset,\n  }: {\n    limit?: number;\n    offset?: number;\n  }): Promise<{\n    totalCount: number;\n    prev: string | null;\n    results: PostResponseDTO[];\n    next: string | null;\n  }> {\n    const posts = await this._postRepository.findAllWithPagination({\n      limit,\n      offset,\n    });\n\n    return {\n      totalCount: posts.totalCount,\n      prev: posts.prev,\n      results: posts.results.map((post) => new PostResponseDTO(post)),\n      next: posts.next,\n    };\n  }\n  async getPostDetail(postId: string): Promise<PostResponseDTO | null> {\n    const post = await this._postRepository.findById(postId);\n\n    if (!post) {\n      throw new HttpException(404, \"게시글을 찾을 수 없습니다.\");\n    }\n\n    return new PostResponseDTO(post);\n  }\n  async updatePost(\n    postId: string,\n    updatedPost: Omit<IPost, \"id\" | \"user\">\n  ): Promise<void> {\n    await this._postRepository.update(postId, updatedPost);\n\n    return;\n  }\n  async deletePost(postId: string): Promise<void> {\n    await this._postRepository.delete(postId);\n  }\n}\n"]}