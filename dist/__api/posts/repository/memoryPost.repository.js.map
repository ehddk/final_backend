{"version":3,"file":"memoryPost.repository.js","sourceRoot":"","sources":["../../../../src/__api/posts/repository/memoryPost.repository.ts"],"names":[],"mappings":";;;;;;AAAA,4FAAmE;AACnE,6DAAoD;AAGpD,MAAa,oBAAoB;IAC/B,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;IACjB,MAAM,CAAU,KAAK,GAAuB,IAAI,GAAG,EAAE,CAAC;IAEtD,KAAK,CAAC,qBAAqB,CAAC,EAC1B,MAAM,EACN,KAAK,GAIN;QAMC,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC/D,OAAO;YACL,UAAU,EAAE,MAAM,CAAC,MAAM;YACzB,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,KAAK,CAAC;YAC7C,IAAI,EACF,MAAM,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,MAAM,GAAG,KAAK,UAAU,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI;YACzE,IAAI,EACF,MAAM,GAAG,KAAK,GAAG,MAAM,CAAC,MAAM;gBAC5B,CAAC,CAAC,WAAW,MAAM,GAAG,KAAK,UAAU,KAAK,EAAE;gBAC5C,CAAC,CAAC,IAAI;SACX,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,IAAuB;QAChC,MAAM,OAAO,GAAG,IAAI,iBAAI,CAAC;YACvB,GAAG,IAAI;YACP,EAAE,EAAE,QAAQ,oBAAoB,CAAC,KAAK,EAAE,EAAE;SAC3C,CAAC,CAAC;QAEH,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QACpD,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,OAAO;QACX,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC/D,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,MAAM,QAAQ,GAAG,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACpD,OAAO,QAAQ,IAAI,IAAI,CAAC;IAC1B,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,MAAc,EAAE,cAA8B;QACzD,MAAM,QAAQ,GAAG,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAExD,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QAClD,CAAC;QAED,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE;YACrC,GAAG,QAAQ;YACX,GAAG,cAAc;SAClB,CAAC,CAAC;QAEH,OAAO,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAE,CAAC;IACjD,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,MAAc;QACzB,MAAM,QAAQ,GAAG,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAExD,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QAClD,CAAC;QAED,oBAAoB,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAE1C,OAAO;IACT,CAAC;;AAvEH,oDAwEC","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { Post } from \"@/api/posts/model/post.model\";\nimport { PostRepository } from \"@/api/posts/repository/post.repository\";\n\nexport class MemoryPostRepository implements PostRepository {\n  static index = 0;\n  static readonly store: Map<string, IPost> = new Map();\n\n  async findAllWithPagination({\n    offset,\n    limit,\n  }: {\n    offset: number;\n    limit: number;\n  }): Promise<{\n    totalCount: number;\n    prev: string | null;\n    results: IPost[];\n    next: string | null;\n  }> {\n    const values = Array.from(MemoryPostRepository.store.values());\n    return {\n      totalCount: values.length,\n      results: values.slice(offset, offset + limit),\n      prev:\n        offset - limit >= 0 ? `?offset=${offset - limit}&limit=${limit}` : null,\n      next:\n        offset + limit < values.length\n          ? `?offset=${offset + limit}&limit=${limit}`\n          : null,\n    };\n  }\n\n  async save(post: Omit<IPost, \"id\">): Promise<IPost> {\n    const newPost = new Post({\n      ...post,\n      id: `post-${MemoryPostRepository.index++}`,\n    });\n\n    MemoryPostRepository.store.set(newPost.id, newPost);\n    return newPost;\n  }\n  async findAll(): Promise<IPost[]> {\n    const values = Array.from(MemoryPostRepository.store.values());\n    return values;\n  }\n\n  async findById(id: string): Promise<IPost | null> {\n    const findPost = MemoryPostRepository.store.get(id);\n    return findPost ?? null;\n  }\n  async update(postId: string, updatePostInfo: Partial<IPost>): Promise<IPost> {\n    const findPost = MemoryPostRepository.store.get(postId);\n\n    if (!findPost) {\n      throw new HttpException(404, \"게시글을 찾을 수 없습니다.\");\n    }\n\n    MemoryPostRepository.store.set(postId, {\n      ...findPost,\n      ...updatePostInfo,\n    });\n\n    return MemoryPostRepository.store.get(postId)!;\n  }\n  async delete(postId: string): Promise<void> {\n    const findPost = MemoryPostRepository.store.get(postId);\n\n    if (!findPost) {\n      throw new HttpException(404, \"게시글을 찾을 수 없습니다.\");\n    }\n\n    MemoryPostRepository.store.delete(postId);\n\n    return;\n  }\n}\n"]}