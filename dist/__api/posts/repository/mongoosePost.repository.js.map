{"version":3,"file":"mongoosePost.repository.js","sourceRoot":"","sources":["../../../../src/__api/posts/repository/mongoosePost.repository.ts"],"names":[],"mappings":";;;;;;AAAA,4FAAmE;AACnE,+DAA6D;AAG7D,MAAa,sBAAsB;IACjC,KAAK,CAAC,qBAAqB,CAAC,EAC1B,MAAM,EACN,KAAK,GAIN;QAMC,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACxC,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QACvC,8CAA8C;QAC9C,MAAM,IAAI,GAAG,MAAM,0BAAY,CAAC,IAAI,EAAE;aACnC,KAAK,CAAC,UAAU,CAAC;aACjB,IAAI,CAAC,WAAW,CAAC;aACjB,QAAQ,CAAC;YACR,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE;gBACR,IAAI,EAAE,SAAS;aAChB;SACF,CAAC;aACD,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QAE3B,MAAM,UAAU,GAAG,MAAM,0BAAY,CAAC,IAAI,EAAE,CAAC,cAAc,EAAE,CAAC;QAE9D,OAAO;YACL,UAAU;YACV,OAAO,EAAE,IAAI;YACb,IAAI,EACF,WAAW,GAAG,UAAU,IAAI,CAAC;gBAC3B,CAAC,CAAC,WAAW,WAAW,GAAG,UAAU,UAAU,UAAU,EAAE;gBAC3D,CAAC,CAAC,IAAI;YACV,IAAI,EACF,WAAW,GAAG,UAAU,GAAG,UAAU;gBACnC,CAAC,CAAC,WAAW,WAAW,GAAG,UAAU,UAAU,UAAU,EAAE;gBAC3D,CAAC,CAAC,IAAI;SACX,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,IAAuB;QAChC,MAAM,OAAO,GAAG,IAAI,0BAAY,CAAC;YAC/B,GAAG,IAAI;SACR,CAAC,CAAC;QAEH,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;QAErB,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,OAAO;QACX,MAAM,MAAM,GAAG,MAAM,0BAAY,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC;YAChD,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE;gBACR,IAAI,EAAE,SAAS;aAChB;SACF,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,MAAM,IAAI,GAAG,MAAM,0BAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC;YACpD,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE;gBACR,IAAI,EAAE,SAAS;aAChB;SACF,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACd,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,MAAc,EAAE,cAA8B;QACzD,MAAM,OAAO,GAAG,MAAM,0BAAY,CAAC,iBAAiB,CAClD,MAAM,EACN,cAAc,CACf,CAAC;QAEF,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QAClD,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,MAAc;QACzB,MAAM,0BAAY,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QAE9C,OAAO;IACT,CAAC;CACF;AAxFD,wDAwFC","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { MongoosePost } from \"@/api/posts/model/post.schema\";\nimport { PostRepository } from \"@/api/posts/repository/post.repository\";\n\nexport class MongoosePostRepository implements PostRepository {\n  async findAllWithPagination({\n    offset,\n    limit,\n  }: {\n    offset: number;\n    limit: number;\n  }): Promise<{\n    totalCount: number;\n    prev: string | null;\n    results: IPost[];\n    next: string | null;\n  }> {\n    const offsetValue = Number(offset) || 0;\n    const limitValue = Number(limit) || 10;\n    // throw new Error(\"Method not implemented.\");\n    const list = await MongoosePost.find()\n      .limit(limitValue)\n      .skip(offsetValue)\n      .populate({\n        path: \"author\",\n        populate: {\n          path: \"profile\",\n        },\n      })\n      .sort({ createdAt: -1 });\n\n    const totalCount = await MongoosePost.find().countDocuments();\n\n    return {\n      totalCount,\n      results: list,\n      prev:\n        offsetValue - limitValue >= 0\n          ? `?offset=${offsetValue - limitValue}&limit=${limitValue}`\n          : null,\n      next:\n        offsetValue + limitValue < totalCount\n          ? `?offset=${offsetValue + limitValue}&limit=${limitValue}`\n          : null,\n    };\n  }\n\n  async save(post: Omit<IPost, \"id\">): Promise<IPost> {\n    const newPost = new MongoosePost({\n      ...post,\n    });\n\n    await newPost.save();\n\n    return newPost;\n  }\n  async findAll(): Promise<IPost[]> {\n    const values = await MongoosePost.find().populate({\n      path: \"author\",\n      populate: {\n        path: \"profile\",\n      },\n    });\n\n    return values;\n  }\n  async findById(id: string): Promise<IPost | null> {\n    const post = await MongoosePost.findById(id).populate({\n      path: \"author\",\n      populate: {\n        path: \"profile\",\n      },\n    });\n    return post;\n  }\n  async update(postId: string, updatePostInfo: Partial<IPost>): Promise<IPost> {\n    const results = await MongoosePost.findByIdAndUpdate(\n      postId,\n      updatePostInfo\n    );\n\n    if (!results) {\n      throw new HttpException(404, \"게시글을 찾을 수 없습니다.\");\n    }\n\n    return results;\n  }\n  async delete(postId: string): Promise<void> {\n    await MongoosePost.deleteOne({ _id: postId });\n\n    return;\n  }\n}\n"]}