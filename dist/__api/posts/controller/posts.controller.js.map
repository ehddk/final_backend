{"version":3,"file":"posts.controller.js","sourceRoot":"","sources":["../../../../src/__api/posts/controller/posts.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport { PostsService } from \"@/api/posts/service/posts.service.type\";\n\n// [유저]\n// 글 목록 조회 - getPosts\n// 글 상세 조회 - getPostDetail\n\nexport default class PostsController {\n  // 컨트롤러에 DI 구조 잡아주는겁니다.\n  private readonly _postsService: PostsService;\n  constructor(_postsService: PostsService) {\n    this._postsService = _postsService;\n\n    this.getPosts = this.getPosts.bind(this);\n    this.getPostDetail = this.getPostDetail.bind(this);\n    this.createPost = this.createPost.bind(this);\n    this.updatePost = this.updatePost.bind(this);\n    this.deletePost = this.deletePost.bind(this);\n  }\n\n  /** 게시글 목록 조회 */\n  async getPosts(\n    req: Request<\n      getPostsRequest[\"path\"],\n      getPostsResponse,\n      getPostsRequest[\"body\"],\n      getPostsRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const { limit, offset } = req.query;\n\n    try {\n      const posts = await this._postsService.getPosts({\n        limit,\n        offset,\n      });\n\n      res.send(posts);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  /** 게시글 상세 조회 */\n  async getPostDetail(\n    req: Request<\n      getPostDetailRequest[\"path\"],\n      getPostDetailResponse,\n      getPostDetailRequest[\"body\"],\n      getPostDetailRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const { postId } = req.params;\n    try {\n      const post = await this._postsService.getPostDetail(postId);\n\n      res.send(post);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  /** 게시글 작성 */\n  async createPost(\n    req: Request<\n      createPostRequest[\"path\"],\n      createPostResponse,\n      createPostRequest[\"body\"],\n      createPostRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const { title, content } = req.body;\n    try {\n      const post = await this._postsService.createPost(req.user.userId, {\n        title,\n        content,\n      });\n\n      res.send(post);\n    } catch (error) {\n      console.error(error);\n      next(error);\n    }\n  }\n\n  /** 게시글 수정 */\n  async updatePost(\n    req: Request<\n      updatePostRequest[\"path\"],\n      updatePostResponse,\n      updatePostRequest[\"body\"],\n      updatePostRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const { postId } = req.params;\n    const { title, content } = req.body;\n    try {\n      const post = await this._postsService.updatePost(postId, {\n        title,\n        content,\n      });\n\n      res.send(post);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  /** 게시글 삭제 */\n  async deletePost(\n    req: Request<\n      deletePostRequest[\"path\"],\n      deletePostResponse,\n      deletePostRequest[\"body\"],\n      deletePostRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const { postId } = req.params;\n\n    try {\n      await this._postsService.deletePost(postId);\n\n      res.send(\"삭제 성공\");\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n"]}