{"version":3,"file":"adminPosts.controller.js","sourceRoot":"","sources":["../../../../src/__api/posts/controller/adminPosts.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport { PostsService } from \"@/api/posts/service/posts.service.type\";\nimport { faker } from \"@faker-js/faker\";\n\n// [관리자]\n// 글 목록 조회 - getPosts\n// 글 상세 조회 - getPostDetail\n// 글 생성 - createPost\n// 글 수정 - updatePost\n// 글 삭제 - deletePost\n\nexport default class AdminPostsController {\n  // 컨트롤러에 DI 구조 잡아주는겁니다.\n  private readonly _postsService: PostsService;\n  constructor(_postsService: PostsService) {\n    this._postsService = _postsService;\n\n    this.getPosts = this.getPosts.bind(this);\n    this.getPostDetail = this.getPostDetail.bind(this);\n    this.createPost = this.createPost.bind(this);\n    this.updatePost = this.updatePost.bind(this);\n    this.deletePost = this.deletePost.bind(this);\n    this.createDummy = this.createDummy.bind(this);\n  }\n\n  async createDummy(req: Request, res: Response, next: NextFunction) {\n    try {\n      const list = new Array(parseInt(req.query.count?.toString() ?? \"100\"))\n        .fill(0)\n        .map((_) => {\n          return {\n            title: faker.lorem.words({ min: 3, max: 5 }),\n            content: faker.lorem.sentence({ min: 10, max: 100 }),\n          };\n        });\n\n      for (const post of list) {\n        await this._postsService.createPost(\"66dff18ed9c4bff59f6f72f1\", {\n          ...post,\n        });\n      }\n\n      res.status(204).json();\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async getPosts(\n    req: Request<\n      adminGetPostsRequest[\"path\"],\n      adminGetPostsResponse,\n      adminGetPostsRequest[\"body\"],\n      adminGetPostsRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    try {\n      const posts = await this._postsService.getPosts({\n        limit: req.query.limit,\n        offset: req.query.offset,\n      });\n      res.send(posts);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async getPostDetail(\n    req: Request<\n      adminGetPostDetailRequest[\"path\"],\n      adminGetPostDetailResponse,\n      adminGetPostDetailRequest[\"body\"],\n      adminGetPostDetailRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    try {\n      const postDetail = await this._postsService.getPostDetail(\n        req.params.postId\n      );\n\n      res.send(postDetail);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async createPost(\n    req: Request<\n      adminCreatePostRequest[\"path\"],\n      adminCreatePostResponse,\n      adminCreatePostRequest[\"body\"],\n      adminCreatePostRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const { ...rest } = req.body;\n\n    // case 2\n    const body = {\n      ...req.body,\n      userId: req.user.userId,\n    };\n\n    try {\n      // case 1\n      const createdPost = await this._postsService.createPost(req.user.userId, {\n        title: rest.title,\n        content: rest.content,\n      });\n      res.send(createdPost);\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async updatePost(\n    req: Request<\n      adminUpdatePostRequest[\"path\"],\n      adminUpdatePostResponse,\n      adminUpdatePostRequest[\"body\"],\n      adminUpdatePostRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const { postId } = req.params;\n\n    try {\n      await this._postsService.updatePost(postId, req.body);\n\n      res.status(204).json();\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  async deletePost(\n    req: Request<\n      adminDeletePostRequest[\"path\"],\n      adminDeletePostResponse,\n      adminDeletePostRequest[\"body\"],\n      adminDeletePostRequest[\"params\"]\n    >,\n    res: Response,\n    next: NextFunction\n  ) {\n    const { postId } = req.params;\n    try {\n      await this._postsService.deletePost(postId);\n      res.status(204).json();\n    } catch (error) {\n      next(error);\n    }\n  }\n}\n"]}