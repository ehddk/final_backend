{"version":3,"file":"memoryShipStatus.repository.js","sourceRoot":"","sources":["../../../../../src/__api/ships/repository/shipStatus/memoryShipStatus.repository.ts"],"names":[],"mappings":";;;AAEA,MAAa,0BAA0B;IACrC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;IACjB,MAAM,CAAU,KAAK,GAA6B,IAAI,GAAG,EAAE,CAAC;IAC5D,KAAK,CAAC,IAAI,CAAC,UAAmC;QAC5C,MAAM,aAAa,GAAG;YACpB,EAAE,EAAE,cAAc,0BAA0B,CAAC,KAAK,EAAE,EAAE;YACtD,GAAG,UAAU;SACd,CAAC;QACF,0BAA0B,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;QACtE,OAAO,aAAa,CAAC;IACvB,CAAC;IACD,KAAK,CAAC,OAAO;QACX,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QACrE,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,MAAM,cAAc,GAAG,0BAA0B,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAChE,OAAO,cAAc,IAAI,IAAI,CAAC;IAChC,CAAC;IACD,KAAK,CAAC,MAAM,CACV,YAAoB,EACpB,oBAA0C;QAE1C,MAAM,cAAc,GAAG,0BAA0B,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC1E,IAAI,CAAC,cAAc,EAAE,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACvC,CAAC;QACD,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC;QACpD,0BAA0B,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;IACrE,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,YAAoB;QAC/B,MAAM,cAAc,GAAG,0BAA0B,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC1E,IAAI,CAAC,cAAc,EAAE,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACvC,CAAC;QACD,0BAA0B,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IACxD,CAAC;;AApCH,gEAqCC","sourcesContent":["import { ShipStatusRepository } from \"@/api/ships/repository/shipStatus/shipStatus.repository\";\n\nexport class MemoryShipStatusRepository implements ShipStatusRepository {\n  static index = 0;\n  static readonly store: Map<string, IShipStatus> = new Map();\n  async save(shipStatus: Omit<IShipStatus, \"id\">): Promise<IShipStatus> {\n    const newShipStatus = {\n      id: `shipStatus-${MemoryShipStatusRepository.index++}`,\n      ...shipStatus,\n    };\n    MemoryShipStatusRepository.store.set(newShipStatus.id, newShipStatus);\n    return newShipStatus;\n  }\n  async findAll(): Promise<IShipStatus[]> {\n    const values = Array.from(MemoryShipStatusRepository.store.values());\n    return values;\n  }\n  async findById(id: string): Promise<IShipStatus | null> {\n    const findShipStatus = MemoryShipStatusRepository.store.get(id);\n    return findShipStatus ?? null;\n  }\n  async update(\n    shipStatusId: string,\n    updateShipStatusInfo: Partial<IShipStatus>\n  ): Promise<void> {\n    const findShipStatus = MemoryShipStatusRepository.store.get(shipStatusId);\n    if (!findShipStatus) {\n      throw new Error(\"함선 상태를 찾을 수 없습니다.\");\n    }\n    Object.assign(findShipStatus, updateShipStatusInfo);\n    MemoryShipStatusRepository.store.set(shipStatusId, findShipStatus);\n  }\n  async delete(shipStatusId: string): Promise<void> {\n    const findShipStatus = MemoryShipStatusRepository.store.get(shipStatusId);\n    if (!findShipStatus) {\n      throw new Error(\"함선 상태를 찾을 수 없습니다.\");\n    }\n    MemoryShipStatusRepository.store.delete(shipStatusId);\n  }\n}\n"]}