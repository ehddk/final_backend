{"version":3,"file":"mongooseShip.repository.js","sourceRoot":"","sources":["../../../../../src/__api/ships/repository/ship/mongooseShip.repository.ts"],"names":[],"mappings":";;;AACA,+DAA6D;AAC7D,MAAa,sBAAsB;IACjC,KAAK,CAAC,IAAI,CAAC,IAAuB;QAChC,MAAM,OAAO,GAAG,IAAI,0BAAY,CAAC,IAAI,CAAC,CAAC;QACvC,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;QACrB,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,OAAO;QACX,MAAM,KAAK,GAAG,MAAM,0BAAY,CAAC,IAAI,EAAE,CAAC;QACxC,OAAO,KAAK,CAAC;IACf,CAAC;IACD,KAAK,CAAC,cAAc,CAAC,EAAU;QAC7B,MAAM,KAAK,GAAG,MAAM,0BAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;QACrD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,KAAK,CAAC,qBAAqB,CAAC,IAAW;QACrC,MAAM,IAAI,GAAG,MAAM,0BAAY,CAAC,OAAO,CAAC;YACtC,IAAI,EAAE,IAAI;YACV,cAAc,EAAE,IAAI;SACrB,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACd,CAAC;IACD,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,MAAM,IAAI,GAAG,MAAM,0BAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,MAAc,EAAE,cAA8B;QACzD,MAAM,0BAAY,CAAC,iBAAiB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;QAC7D,OAAO;IACT,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,MAAc;QACzB,MAAM,0BAAY,CAAC,UAAU,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAC1D,CAAC;CACF;AAhCD,wDAgCC","sourcesContent":["import { ShipRepository } from \"@/api/ships/repository/ship/ship.repository\";\nimport { MongooseShip } from \"@/api/ships/model/ship.schema\";\nexport class MongooseShipRepository implements ShipRepository {\n  async save(ship: Omit<IShip, \"id\">): Promise<IShip> {\n    const newShip = new MongooseShip(ship);\n    await newShip.save();\n    return newShip;\n  }\n  async findAll(): Promise<IShip[]> {\n    const ships = await MongooseShip.find();\n    return ships;\n  }\n  async findAllByFleet(id: string): Promise<IShip[]> {\n    const ships = await MongooseShip.find({ fleet: id });\n    return ships;\n  }\n  async findByUserAndFlagShip(user: IUser): Promise<IShip | null> {\n    const ship = await MongooseShip.findOne({\n      user: user,\n      isUserFlagship: true,\n    });\n    return ship;\n  }\n  async findById(id: string): Promise<IShip | null> {\n    const ship = await MongooseShip.findById(id);\n    return ship;\n  }\n  async update(shipId: string, updateShipInfo: Partial<IShip>): Promise<void> {\n    await MongooseShip.findByIdAndUpdate(shipId, updateShipInfo);\n    return;\n  }\n  async delete(shipId: string): Promise<void> {\n    await MongooseShip.deleteMany({ _id: { $in: shipId } });\n  }\n}\n"]}