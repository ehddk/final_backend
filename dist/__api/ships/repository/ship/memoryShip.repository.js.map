{"version":3,"file":"memoryShip.repository.js","sourceRoot":"","sources":["../../../../../src/__api/ships/repository/ship/memoryShip.repository.ts"],"names":[],"mappings":";;;;;;AAAA,4FAAmE;AAGnE,6DAAoD;AAEpD,MAAa,oBAAoB;IAC/B,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;IACjB,MAAM,CAAU,KAAK,GAAuB,IAAI,GAAG,EAAE,CAAC;IAEtD,KAAK,CAAC,IAAI,CAAC,IAAuB;QAChC,MAAM,OAAO,GAAG,IAAI,iBAAI,CAAC;YACvB,GAAG,IAAI;YACP,EAAE,EAAE,QAAQ,oBAAoB,CAAC,KAAK,EAAE,EAAE;SAC3C,CAAC,CAAC;QACH,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QACpD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC/D,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,EAAU;QAC7B,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC/D,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC;IACpD,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,MAAM,QAAQ,GAAG,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACpD,OAAO,QAAQ,IAAI,IAAI,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,IAAW;QACrC,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QAC/D,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAC3B,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,cAAc,CAC3D,CAAC;QACF,OAAO,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;IACpD,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,MAAc,EAAE,cAA8B;QACzD,MAAM,QAAQ,GAAG,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACxD,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QACjD,CAAC;QACD,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;QACxC,IAAI,cAAc,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YACtC,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC;QAC3B,CAAC;QACD,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACjD,OAAO;IACT,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,MAAc;QACzB,MAAM,QAAQ,GAAG,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACxD,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QACjD,CAAC;QACD,oBAAoB,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC1C,OAAO;IACT,CAAC;;AAzDH,oDA0DC","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\n\nimport { ShipRepository } from \"@/api/ships/repository/ship/ship.repository\";\nimport { Ship } from \"@/api/ships/model/ship.model\";\n\nexport class MemoryShipRepository implements ShipRepository {\n  static index = 0;\n  static readonly store: Map<string, IShip> = new Map();\n\n  async save(ship: Omit<IShip, \"id\">): Promise<IShip> {\n    const newShip = new Ship({\n      ...ship,\n      id: `ship-${MemoryShipRepository.index++}`,\n    });\n    MemoryShipRepository.store.set(newShip.id, newShip);\n    return newShip;\n  }\n\n  async findAll(): Promise<IShip[]> {\n    const values = Array.from(MemoryShipRepository.store.values());\n    return values;\n  }\n\n  async findAllByFleet(id: string): Promise<IShip[]> {\n    const values = Array.from(MemoryShipRepository.store.values());\n    return values.filter((ship) => ship.fleet === id);\n  }\n\n  async findById(id: string): Promise<IShip | null> {\n    const findShip = MemoryShipRepository.store.get(id);\n    return findShip ?? null;\n  }\n\n  async findByUserAndFlagShip(user: IUser): Promise<IShip | null> {\n    const values = Array.from(MemoryShipRepository.store.values());\n    const foundShip = values.find(\n      (ship) => ship.user?.id === user.id && ship.isUserFlagship\n    );\n    return foundShip !== undefined ? foundShip : null;\n  }\n\n  async update(shipId: string, updateShipInfo: Partial<IShip>): Promise<void> {\n    const findShip = MemoryShipRepository.store.get(shipId);\n    if (!findShip) {\n      throw new HttpException(404, \"함선을 찾을 수 없습니다.\");\n    }\n    const shipType = findShip.type;\n    Object.assign(findShip, updateShipInfo);\n    if (updateShipInfo.type === undefined) {\n      findShip.type = shipType;\n    }\n    MemoryShipRepository.store.set(shipId, findShip);\n    return;\n  }\n\n  async delete(shipId: string): Promise<void> {\n    const findShip = MemoryShipRepository.store.get(shipId);\n    if (!findShip) {\n      throw new HttpException(404, \"함선을 찾을 수 없습니다.\");\n    }\n    MemoryShipRepository.store.delete(shipId);\n    return;\n  }\n}\n"]}