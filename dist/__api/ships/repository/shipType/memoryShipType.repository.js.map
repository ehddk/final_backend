{"version":3,"file":"memoryShipType.repository.js","sourceRoot":"","sources":["../../../../../src/__api/ships/repository/shipType/memoryShipType.repository.ts"],"names":[],"mappings":";;;;;;AAAA,4FAAmE;AAGnE,MAAa,wBAAwB;IACnC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;IACjB,MAAM,CAAU,KAAK,GAA2B,IAAI,GAAG,EAAE,CAAC;IAE1D,KAAK,CAAC,IAAI,CAAC,QAA+B;QACxC,MAAM,WAAW,GAAG,EAAE,GAAG,QAAQ,EAAE,EAAE,EAAE,YAAY,wBAAwB,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC;QACxF,wBAAwB,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;QAChE,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QACnE,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,MAAM,YAAY,GAAG,wBAAwB,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC5D,OAAO,YAAY,IAAI,IAAI,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,UAAkB,EAAE,kBAAsC;QACrE,MAAM,YAAY,GAAG,wBAAwB,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACpE,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;QACpD,CAAC;QACD,wBAAwB,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,GAAG,YAAY,EAAE,GAAG,kBAAkB,EAAE,CAAC,CAAC;IAC7F,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,UAAkB;QAC7B,MAAM,YAAY,GAAG,wBAAwB,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACpE,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;QACpD,CAAC;QACD,wBAAwB,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACpD,CAAC;;AAlCH,4DAmCC","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { ShipTypeRepository } from \"@/api/ships/repository/shipType/shipType.repository\";\n\nexport class MemoryShipTypeRepository implements ShipTypeRepository {\n  static index = 0;\n  static readonly store: Map<string, IShipType> = new Map();\n\n  async save(shipType: Omit<IShipType, \"id\">): Promise<IShipType> {\n    const newShipType = { ...shipType, id: `shipType-${MemoryShipTypeRepository.index++}` };\n    MemoryShipTypeRepository.store.set(newShipType.id, newShipType);\n    return newShipType;\n  }\n\n  async findAll(): Promise<IShipType[]> {\n    const values = Array.from(MemoryShipTypeRepository.store.values());\n    return values;\n  }\n\n  async findById(id: string): Promise<IShipType | null> {\n    const findShipType = MemoryShipTypeRepository.store.get(id);\n    return findShipType ?? null;\n  }\n\n  async update(shipTypeId: string, updateShipTypeInfo: Partial<IShipType>): Promise<void> {\n    const findShipType = MemoryShipTypeRepository.store.get(shipTypeId);\n    if (!findShipType) {\n      throw new HttpException(404, \"함선 타입을 찾을 수 없습니다.\");\n    }\n    MemoryShipTypeRepository.store.set(shipTypeId, { ...findShipType, ...updateShipTypeInfo });\n  }\n\n  async delete(shipTypeId: string): Promise<void> {\n    const findShipType = MemoryShipTypeRepository.store.get(shipTypeId);\n    if (!findShipType) {\n      throw new HttpException(404, \"함선 타입을 찾을 수 없습니다.\");\n    }\n    MemoryShipTypeRepository.store.delete(shipTypeId);\n  }\n}\n"]}