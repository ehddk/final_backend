{"version":3,"file":"memoryShipSlot.repository.js","sourceRoot":"","sources":["../../../../../src/__api/ships/repository/shipSlot/memoryShipSlot.repository.ts"],"names":[],"mappings":";;;;;;AAAA,4FAAmE;AAGnE,MAAa,wBAAwB;IACnC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;IACjB,MAAM,CAAU,KAAK,GAA2B,IAAI,GAAG,EAAE,CAAC;IAE1D,KAAK,CAAC,IAAI,CAAC,QAA+B;QACxC,MAAM,WAAW,GAAG;YAClB,EAAE,EAAE,YAAY,wBAAwB,CAAC,KAAK,EAAE,EAAE;YAClD,GAAG,QAAQ;SACZ,CAAC;QACF,wBAAwB,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;QAChE,OAAO,WAAW,CAAC;IACrB,CAAC;IACD,KAAK,CAAC,OAAO;QACX,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QACnE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,MAAM,YAAY,GAAG,wBAAwB,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC5D,OAAO,YAAY,IAAI,IAAI,CAAC;IAC9B,CAAC;IACD,KAAK,CAAC,MAAM,CACV,UAAkB,EAClB,kBAAkD;QAElD,MAAM,YAAY,GAAG,wBAAwB,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACpE,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;QACpD,CAAC;QACD,MAAM,YAAY,GAAG,EAAE,EAAE,EAAE,UAAU,EAAE,GAAG,kBAAkB,EAAE,CAAC;QAC/D,wBAAwB,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;IAC/D,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,UAAkB;QAC7B,MAAM,YAAY,GAAG,wBAAwB,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACpE,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;QACpD,CAAC;QACD,wBAAwB,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACpD,CAAC;;AAtCH,4DAuCC","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { ShipSlotRepository } from \"@/api/ships/repository/shipSlot/shipSlot.repository\";\n\nexport class MemoryShipSlotRepository implements ShipSlotRepository {\n  static index = 0;\n  static readonly store: Map<string, IShipSlot> = new Map();\n\n  async save(shipSlot: Omit<IShipSlot, \"id\">): Promise<IShipSlot> {\n    const newShipSlot = {\n      id: `shipSlot-${MemoryShipSlotRepository.index++}`,\n      ...shipSlot,\n    };\n    MemoryShipSlotRepository.store.set(newShipSlot.id, newShipSlot);\n    return newShipSlot;\n  }\n  async findAll(): Promise<IShipSlot[]> {\n    const values = Array.from(MemoryShipSlotRepository.store.values());\n    console.log(values);\n    return values;\n  }\n  async findById(id: string): Promise<IShipSlot | null> {\n    const findShipSlot = MemoryShipSlotRepository.store.get(id);\n    return findShipSlot ?? null;\n  }\n  async update(\n    shipSlotId: string,\n    updateShipSlotInfo: Partial<Omit<IShipSlot, \"id\">>\n  ): Promise<void> {\n    const findShipSlot = MemoryShipSlotRepository.store.get(shipSlotId);\n    if (!findShipSlot) {\n      throw new HttpException(404, \"함선 슬롯을 찾을 수 없습니다.\");\n    }\n    const nextShipSlot = { id: shipSlotId, ...updateShipSlotInfo };\n    MemoryShipSlotRepository.store.set(shipSlotId, nextShipSlot);\n  }\n  async delete(shipSlotId: string): Promise<void> {\n    const findShipSlot = MemoryShipSlotRepository.store.get(shipSlotId);\n    if (!findShipSlot) {\n      throw new HttpException(404, \"함선 슬롯을 찾을 수 없습니다.\");\n    }\n    MemoryShipSlotRepository.store.delete(shipSlotId);\n  }\n}\n"]}