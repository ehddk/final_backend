{"version":3,"file":"mongooseShipSlot.repository.js","sourceRoot":"","sources":["../../../../../src/__api/ships/repository/shipSlot/mongooseShipSlot.repository.ts"],"names":[],"mappings":";;;;;;AAAA,4FAAmE;AACnE,uEAAqE;AAGrE,MAAa,0BAA0B;IACrC,KAAK,CAAC,IAAI,CAAC,QAA+B;QACxC,MAAM,WAAW,GAAG,IAAI,kCAAgB,CAAC,QAAQ,CAAC,CAAC;QACnD,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;QACzB,OAAO,WAAW,CAAC;IACrB,CAAC;IACD,KAAK,CAAC,OAAO;QACX,OAAO,MAAM,kCAAgB,CAAC,IAAI,EAAE,CAAC;IACvC,CAAC;IACD,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,OAAO,MAAM,kCAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,MAAM,CACV,UAAkB,EAClB,kBAAkD;QAElD,MAAM,MAAM,GAAG,MAAM,kCAAgB,CAAC,iBAAiB,CACrD,UAAU,EACV,kBAAkB,CACnB,CAAC;QACF,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;QACpD,CAAC;QACD,OAAO;IACT,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,UAAkB;QAC7B,MAAM,MAAM,GAAG,MAAM,kCAAgB,CAAC,UAAU,CAAC;YAC/C,GAAG,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE;SACzB,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;QACpD,CAAC;QACD,OAAO;IACT,CAAC;CACF;AAlCD,gEAkCC","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { MongooseShipSlot } from \"@/api/ships/model/shipSlot.schema\";\nimport { ShipSlotRepository } from \"@/api/ships/repository/shipSlot/shipSlot.repository\";\n\nexport class MongooseShipSlotRepository implements ShipSlotRepository {\n  async save(shipSlot: Omit<IShipSlot, \"id\">): Promise<IShipSlot> {\n    const newShipSlot = new MongooseShipSlot(shipSlot);\n    await newShipSlot.save();\n    return newShipSlot;\n  }\n  async findAll(): Promise<IShipSlot[]> {\n    return await MongooseShipSlot.find();\n  }\n  async findById(id: string): Promise<IShipSlot | null> {\n    return await MongooseShipSlot.findById(id);\n  }\n  async update(\n    shipSlotId: string,\n    updateShipSlotInfo: Partial<Omit<IShipSlot, \"id\">>\n  ): Promise<void> {\n    const result = await MongooseShipSlot.findByIdAndUpdate(\n      shipSlotId,\n      updateShipSlotInfo\n    );\n    if (!result) {\n      throw new HttpException(404, \"함선 슬롯을 찾을 수 없습니다.\");\n    }\n    return;\n  }\n  async delete(shipSlotId: string): Promise<void> {\n    const result = await MongooseShipSlot.deleteMany({\n      _id: { $in: shipSlotId },\n    });\n    if (!result) {\n      throw new HttpException(404, \"함선 슬롯을 찾을 수 없습니다.\");\n    }\n    return;\n  }\n}\n"]}