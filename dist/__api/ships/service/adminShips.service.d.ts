import { ShipRepository } from "@/api/ships/repository/ship/ship.repository";
import { ShipSlotRepository } from "@/api/ships/repository/shipSlot/shipSlot.repository";
import { ShipTypeRepository } from "@/api/ships/repository/shipType/shipType.repository";
import { AdminShipService } from "@/api/ships/service/adminShips.service.type";
import { ShipResponseDto } from "@/api/ships/dto/shipResponse.dto";
import { ShipStatusRepository } from "@/api/ships/repository/shipStatus/shipStatus.repository";
export default class AdminShipServiceImpl implements AdminShipService {
    private readonly _shipRepository;
    private readonly _shipTypeRepository;
    private readonly _shipSlotRepository;
    private readonly _shipStatusRepository;
    constructor(_shipRepository: ShipRepository, _shipTypeRepository: ShipTypeRepository, _shipSlotRepository: ShipSlotRepository, _shipStatusRepository: ShipStatusRepository);
    getShips(): Promise<ShipResponseDto[]>;
    getShip(id: string): Promise<ShipResponseDto | null>;
    getShipType(id: string): Promise<IShipType>;
    getShipSlots(): Promise<IShipSlot[]>;
    getShipSlot(id: string): Promise<IShipSlot | null>;
    getShipStatus(id: string): Promise<IShipStatus>;
    createShip(params: Omit<IShip, "id">): Promise<IShip>;
    createShipType(params: Omit<IShipType, "id">): Promise<IShipType>;
    createShipSlot(params: Omit<IShipSlot, "id">): Promise<IShipSlot>;
    createShipStatus(params: Omit<IShipStatus, "id">): Promise<IShipStatus>;
    updateShip(id: string, params: Partial<IShip>): Promise<void>;
    updateShipType(id: string, params: Partial<IShipType>): Promise<void>;
    updateShipSlot(id: string, params: Partial<IShipSlot>): Promise<void>;
    updateShipStatus(id: string, params: Partial<IShipStatus>): Promise<void>;
    deleteShip(id: string): Promise<void>;
    deleteShips(ids: string[]): Promise<void>;
    deleteShipType(id: string): Promise<void>;
    deleteShipSlot(id: string): Promise<void>;
    deleteShipStatus(id: string): Promise<void>;
}
