{"version":3,"file":"ships.service.js","sourceRoot":"","sources":["../../../../src/__api/ships/service/ships.service.ts"],"names":[],"mappings":"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","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { ShipRepository } from \"@/api/ships/repository/ship/ship.repository\";\nimport { ShipSlotRepository } from \"@/api/ships/repository/shipSlot/shipSlot.repository\";\nimport { ShipTypeRepository } from \"@/api/ships/repository/shipType/shipType.repository\";\nimport { ShipService } from \"@/api/ships/service/ships.service.type\";\nimport { UserRepository } from \"@/api/users/repository/user/user.repository\";\nimport { ShipResponseDto } from \"@/api/ships/dto/shipResponse.dto\";\nimport { ShipStatusRepository } from \"@/api/ships/repository/shipStatus/shipStatus.repository\";\n\nexport default class ShipServiceImpl implements ShipService {\n  constructor(\n    private readonly _shipRepository: ShipRepository,\n    private readonly _shipTypeRepository: ShipTypeRepository,\n    private readonly _shipSlotRepository: ShipSlotRepository,\n    private readonly _userRepository: UserRepository,\n    private readonly _shipStatusRepository: ShipStatusRepository\n  ) {}\n  async getFleetShipsList(fleetID: string): Promise<ShipResponseDto[]> {\n    const ships = await this._shipRepository.findAllByFleet(fleetID);\n    return ships.map((ship) => new ShipResponseDto(ship));\n  }\n  async getFlagshipInfo(userId: string): Promise<ShipResponseDto | null> {\n    const user = await this._userRepository.findById(userId);\n    if (!user) {\n      throw new HttpException(404, \"사용자를 찾을 수 없습니다.\");\n    }\n    const ship = await this._shipRepository.findByUserAndFlagShip(user);\n    if (!ship) {\n      return null;\n    }\n    return new ShipResponseDto(ship);\n  }\n  async getShipInfo(shipId: string): Promise<ShipResponseDto | null> {\n    const ship = await this._shipRepository.findById(shipId);\n    if (!ship) {\n      return null;\n    }\n    return new ShipResponseDto(ship);\n  }\n  async createShip(params: Omit<IShip, \"id\">): Promise<ShipResponseDto> {\n    const shipType = await this._shipTypeRepository.findById(params.type.id);\n    if (!shipType) {\n      throw new HttpException(404, \"함선 타입을 찾을 수 없습니다.\");\n    }\n    let shipSlot: IShipSlot[] = [];\n    if (params.slot) {\n      await Promise.all(\n        params.slot.map(async (slot) => {\n          const slotItem = await this._shipSlotRepository.findById(slot.id);\n          if (!slotItem) {\n            return;\n          }\n          shipSlot.push(slotItem);\n        })\n      );\n    }\n    const ship = await this._shipRepository.save({\n      ...params,\n      type: shipType,\n      slot: shipSlot,\n    });\n    return new ShipResponseDto(ship);\n  }\n  async updateShip(shipId: string, params: Partial<IShip>): Promise<void> {\n    if (params.type) {\n      const shipType = await this._shipTypeRepository.findById(params.type.id);\n      if (!shipType) {\n        throw new HttpException(404, \"함선 타입을 찾을 수 없습니다.\");\n      }\n      this._shipTypeRepository.update(params.type.id, params.type);\n    }\n    let shipSlot: Array<IShipSlot> = [];\n    if (params.slot) {\n      await Promise.all(\n        params.slot.map(async (slot) => {\n          const slotItem = await this._shipSlotRepository.findById(slot.id);\n          if (slotItem === null && slot.id) {\n            const newSlotItem = await this._shipSlotRepository.save(slot);\n            shipSlot.push(newSlotItem);\n            return;\n          }\n          if (slotItem === null) {\n            return;\n          }\n          shipSlot.push(slotItem);\n        })\n      );\n    }\n    if (params.status) {\n      const shipStatus = await this._shipStatusRepository.findById(\n        params.status.id\n      );\n      if (!shipStatus) {\n        throw new HttpException(404, \"함선 상태를 찾을 수 없습니다.\");\n      }\n      this._shipStatusRepository.update(params.status.id, params.status);\n    }\n    await this._shipRepository.update(shipId, {\n      ...params,\n      type: params.type,\n      slot: params.slot,\n      status: params.status,\n    });\n    return;\n  }\n  async deleteShip(shipId: string): Promise<void> {\n    const ship = await this._shipRepository.findById(shipId);\n    if (!ship) {\n      throw new HttpException(404, \"함선을 찾을 수 없습니다.\");\n    }\n    if (ship.status) {\n      await this._shipStatusRepository.delete(ship.status.id);\n    }\n    if (ship.slot) {\n      await Promise.all(\n        ship.slot.map((slot) => this._shipSlotRepository.delete(slot.id))\n      );\n    }\n    if (ship.status) {\n      await this._shipStatusRepository.delete(ship.status.id);\n    }\n    await this._shipRepository.delete(shipId);\n    return;\n  }\n}\n"]}