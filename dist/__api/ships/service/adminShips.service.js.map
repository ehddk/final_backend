{"version":3,"file":"adminShips.service.js","sourceRoot":"","sources":["../../../../src/__api/ships/service/adminShips.service.ts"],"names":[],"mappings":"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","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { ShipRepository } from \"@/api/ships/repository/ship/ship.repository\";\nimport { ShipSlotRepository } from \"@/api/ships/repository/shipSlot/shipSlot.repository\";\nimport { ShipTypeRepository } from \"@/api/ships/repository/shipType/shipType.repository\";\nimport { AdminShipService } from \"@/api/ships/service/adminShips.service.type\";\nimport { ShipResponseDto } from \"@/api/ships/dto/shipResponse.dto\";\nimport { ShipStatusRepository } from \"@/api/ships/repository/shipStatus/shipStatus.repository\";\n\nexport default class AdminShipServiceImpl implements AdminShipService {\n  constructor(\n    private readonly _shipRepository: ShipRepository,\n    private readonly _shipTypeRepository: ShipTypeRepository,\n    private readonly _shipSlotRepository: ShipSlotRepository,\n    private readonly _shipStatusRepository: ShipStatusRepository\n  ) {}\n\n  async getShips(): Promise<ShipResponseDto[]> {\n    const ships = await this._shipRepository.findAll();\n    return ships.map((ship) => new ShipResponseDto(ship));\n  }\n\n  async getShip(id: string): Promise<ShipResponseDto | null> {\n    const ship = await this._shipRepository.findById(id);\n    if (!ship) {\n      throw new HttpException(404, \"함선을 찾을 수 없습니다.\");\n    }\n    return ship ? new ShipResponseDto(ship) : null;\n  }\n\n  async getShipType(id: string): Promise<IShipType> {\n    const shipType = await this._shipTypeRepository.findById(id);\n    if (!shipType) {\n      throw new HttpException(404, \"함선 타입을 찾을 수 없습니다.\");\n    }\n    return shipType;\n  }\n\n  async getShipSlots(): Promise<IShipSlot[]> {\n    const shipSlots = await this._shipSlotRepository.findAll();\n    return shipSlots;\n  }\n\n  async getShipSlot(id: string): Promise<IShipSlot | null> {\n    const shipSlot = await this._shipSlotRepository.findById(id);\n    return shipSlot ?? null;\n  }\n\n  async getShipStatus(id: string): Promise<IShipStatus> {\n    const shipStatus = await this._shipStatusRepository.findById(id);\n    if (!shipStatus) {\n      throw new HttpException(404, \"함선 상태를 찾을 수 없습니다.\");\n    }\n    return shipStatus;\n  }\n\n  async createShip(params: Omit<IShip, \"id\">): Promise<IShip> {\n    const shipType = await this._shipTypeRepository.findById(params.type.id);\n    if (!shipType) {\n      throw new HttpException(404, \"함선 타입을 찾을 수 없습니다.\");\n    }\n    let shipSlot: Array<IShipSlot> = [];\n    if (params.slot) {\n      await Promise.all(\n        params.slot.map(async (slot) => {\n          const slotItem = await this._shipSlotRepository.findById(slot.id);\n          if (slotItem === null && slot.id) {\n            const newSlotItem = await this._shipSlotRepository.save(slot);\n            shipSlot.push(newSlotItem);\n            return;\n          }\n          if (slotItem === null) {\n            return;\n          }\n          shipSlot.push(slotItem);\n        })\n      );\n    }\n    const ship = await this._shipRepository.save({\n      ...params,\n      type: shipType,\n      slot: shipSlot,\n    });\n    return ship;\n  }\n  async createShipType(params: Omit<IShipType, \"id\">): Promise<IShipType> {\n    const shipType = await this._shipTypeRepository.save(params);\n    return shipType;\n  }\n  async createShipSlot(params: Omit<IShipSlot, \"id\">): Promise<IShipSlot> {\n    const shipSlot = await this._shipSlotRepository.save(params);\n    return shipSlot;\n  }\n\n  async createShipStatus(\n    params: Omit<IShipStatus, \"id\">\n  ): Promise<IShipStatus> {\n    const shipStatus = await this._shipStatusRepository.save(params);\n    return shipStatus;\n  }\n\n  async updateShip(id: string, params: Partial<IShip>): Promise<void> {\n    if (params.type) {\n      const shipType = await this._shipTypeRepository.findById(params.type.id);\n      if (!shipType) {\n        throw new HttpException(404, \"함선 타입을 찾을 수 없습니다.\");\n      }\n      this._shipTypeRepository.update(params.type.id, {\n        ...shipType,\n        ...params.type,\n      });\n    }\n    let shipSlot: Array<IShipSlot> = [];\n    if (params.slot) {\n      await Promise.all(\n        params.slot.map(async (slot) => {\n          const slotItem = await this._shipSlotRepository.findById(slot.id);\n          if (slotItem === null && slot.id) {\n            const newSlotItem = await this._shipSlotRepository.save(slot);\n            shipSlot.push(newSlotItem);\n            return;\n          }\n          if (slotItem === null) {\n            return;\n          }\n          shipSlot.push(slotItem);\n        })\n      );\n    }\n    await this._shipRepository.update(id, {\n      ...params,\n      type: params.type,\n      slot: params.slot,\n    });\n    return;\n  }\n  async updateShipType(id: string, params: Partial<IShipType>): Promise<void> {\n    await this._shipTypeRepository.update(id, params);\n    return;\n  }\n  async updateShipSlot(id: string, params: Partial<IShipSlot>): Promise<void> {\n    await this._shipSlotRepository.update(id, params);\n    return;\n  }\n  async updateShipStatus(\n    id: string,\n    params: Partial<IShipStatus>\n  ): Promise<void> {\n    await this._shipStatusRepository.update(id, params);\n    return;\n  }\n  async deleteShip(id: string): Promise<void> {\n    const ship = await this._shipRepository.findById(id);\n    if (!ship) {\n      throw new HttpException(404, \"함선을 찾을 수 없습니다.\");\n    }\n    if (ship.status) {\n      await this.deleteShipStatus(ship.status.id);\n    }\n    if (ship.slot) {\n      await Promise.all(ship.slot.map((slot) => this.deleteShipSlot(slot.id)));\n    }\n    if (ship.status) {\n      await this.deleteShipStatus(ship.status.id);\n    }\n    await this._shipRepository.delete(id);\n    return;\n  }\n  async deleteShips(ids: string[]): Promise<void> {\n    await Promise.all((ids || []).map((id) => this.deleteShip(id)));\n    return;\n  }\n  async deleteShipType(id: string): Promise<void> {\n    const shipType = await this._shipTypeRepository.findById(id);\n    if (!shipType) {\n      throw new HttpException(404, \"함선 타입을 찾을 수 없습니다.\");\n    }\n    await this._shipTypeRepository.delete(id);\n    return;\n  }\n  async deleteShipSlot(id: string): Promise<void> {\n    const shipSlot = await this._shipSlotRepository.findById(id);\n    if (!shipSlot) {\n      throw new HttpException(404, \"함선 슬롯을 찾을 수 없습니다.\");\n    }\n    await this._shipSlotRepository.delete(id);\n    return;\n  }\n  async deleteShipStatus(id: string): Promise<void> {\n    const shipStatus = await this._shipStatusRepository.findById(id);\n    if (!shipStatus) {\n      throw new HttpException(404, \"함선 상태를 찾을 수 없습니다.\");\n    }\n    await this._shipStatusRepository.delete(id);\n    return;\n  }\n}\n"]}