{"version":3,"file":"auth.view.controller.js","sourceRoot":"","sources":["../../../../src/__api/auth/controller/auth.view.controller.ts"],"names":[],"mappings":";;AAIA,MAAqB,kBAAkB;IACpB,YAAY,CAAc;IAC1B,YAAY,CAAc;IAE3C,YAAY,WAAwB,EAAE,WAAwB;QAC5D,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;QACzD,IAAI,CAAC;YACH,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;YAErC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAE9D,GAAG;iBACA,MAAM,CAAC,GAAG,CAAC;iBACX,SAAS,CAAC,eAAe,EAAE,UAAU,MAAM,CAAC,WAAW,EAAE,CAAC;iBAC1D,SAAS,CACR,YAAY,EACZ,sBAAsB,MAAM,CAAC,WAAW,WAAW,CACpD;iBACA,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACxB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;yBACF,KAAK,CAAC,OAAO,2CAA2C,CAAC,CAAC;QAC/E,CAAC;IACH,CAAC;IAED,cAAc;IACd,KAAK,CAAC,SAAS,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;QAC7D,GAAG,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;IAClC,CAAC;IAED,eAAe;IACf,KAAK,CAAC,UAAU,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;QAC9D,GAAG,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;IACnC,CAAC;CACF;AAvCD,qCAuCC","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport { AuthService } from \"@/api/auth/service/auth.service.type\";\nimport { UserService } from \"@/api/users/service/users.service.type\";\n\nexport default class AuthViewController {\n  private readonly _authService: AuthService;\n  private readonly _userService: UserService;\n\n  constructor(authService: AuthService, userService: UserService) {\n    this._authService = authService;\n    this._userService = userService;\n    this.login = this.login.bind(this);\n  }\n\n  async login(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { email, password } = req.body;\n\n      const result = await this._authService.login(email, password);\n\n      res\n        .status(200)\n        .setHeader(\"Authorization\", `Bearer ${result.accessToken}`)\n        .setHeader(\n          `Set-Cookie`,\n          `accessToken=Bearer ${result.accessToken}; Path=/;`\n        )\n        .redirect(\"/posts\");\n    } catch (error: any) {\n      res.status(401).send(`\n        <script>alert('${error.message}'); location.href='/auth/login';</script>`);\n    }\n  }\n\n  /** 로그인 페이지 */\n  async loginPage(req: Request, res: Response, next: NextFunction) {\n    res.render(\"client/auth/login\");\n  }\n\n  /** 회원가입 페이지 */\n  async signUpPage(req: Request, res: Response, next: NextFunction) {\n    res.render(\"client/auth/signup\");\n  }\n}\n"]}