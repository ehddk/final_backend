{"version":3,"file":"users.service.js","sourceRoot":"","sources":["../../../../src/__api/users/service/users.service.ts"],"names":[],"mappings":";AAAA,sEAAsE;AACtE,sEAAsE;AACtE,gFAAgF;AAChF,wEAAwE;AACxE,4EAA4E;AAC5E,8EAA8E;AAC9E,yFAAyF;AAEzF,yDAAyD;AACzD,iBAAiB;AACjB,wDAAwD;AACxD,6DAA6D;AAC7D,SAAS;AAET,4EAA4E;AAC5E,0EAA0E;AAE1E,qDAAqD;AACrD,mBAAmB;AACnB,iBAAiB;AACjB,UAAU;AAEV,wCAAwC;AACxC,MAAM;AAEN,uDAAuD;AACvD,0DAA0D;AAE1D,yCAAyC;AACzC,2DAA2D;AAC3D,SAAS;AAET,sBAAsB;AACtB,MAAM;AACN,oEAAoE;AACpE,4DAA4D;AAE5D,iEAAiE;AAEjE,0DAA0D;AAE1D,sBAAsB;AACtB,MAAM;AAEN,8EAA8E;AAC9E,oEAAoE;AAEpE,qEAAqE;AAErE,kEAAkE;AAClE,6BAA6B;AAC7B,8BAA8B;AAC9B,SAAS;AAET,kDAAkD;AAClD,mBAAmB;AACnB,gCAAgC;AAChC,UAAU;AAEV,cAAc;AACd,MAAM;AAEN,kDAAkD;AAClD,gEAAgE;AAEhE,qEAAqE;AAErE,iEAAiE;AAEjE,6CAA6C;AAE7C,cAAc;AACd,MAAM;AAEN,sDAAsD;AACtD,mFAAmF;AAEnF,cAAc;AACd,MAAM;AACN,IAAI","sourcesContent":["// import HttpException from \"@/api/common/exceptions/http.exception\";\n// import { UserResponseDTO } from \"@/api/users/dto/userResponse.dto\";\n// import { UserRepository } from \"@/api/users/repository/user/user.repository\";\n// import { UserService } from \"@/api/users/service/users.service.type\";\n// import { GetUserResponseDTO } from \"@/api/users/dto/getUserResponse.dto\";\n// import { GetUsersResponseDTO } from \"@/api/users/dto/getUsersResponse.dto\";\n// import { ProfileRepository } from \"@/api/users/repository/profile/profile.repository\";\n\n// export class UsersServiceImpl implements UserService {\n//   constructor(\n//     private readonly _userRepository: UserRepository,\n//     private readonly _profileRepository: ProfileRepository\n//   ) {}\n\n//   async createUser(params: Omit<IUser, \"id\">): Promise<UserResponseDTO> {\n//     const profile = await this._profileRepository.save(params.profile);\n\n//     const user = await this._userRepository.save({\n//       ...params,\n//       profile,\n//     });\n\n//     return new UserResponseDTO(user);\n//   }\n\n//   async getUsers(): Promise<GetUsersResponseDTO[]> {\n//     const users = await this._userRepository.findAll();\n\n//     const newList = await Promise.all(\n//       users.map((user) => new GetUsersResponseDTO(user))\n//     );\n\n//     return newList;\n//   }\n//   async getUser(id: string): Promise<GetUserResponseDTO | null> {\n//     const user = await this._userRepository.findById(id);\n\n//     if (!user) throw new HttpException(404, \"유저를 찾을 수 없습니다.\");\n\n//     const dtoUser = await new GetUserResponseDTO(user);\n\n//     return dtoUser;\n//   }\n\n//   async updateUser(userId: string, params: Partial<IUser>): Promise<void> {\n//     const findUser = await this._userRepository.findById(userId);\n\n//     if (!findUser) throw new HttpException(404, \"유저를 찾을 수 없습니다.\");\n\n//     const updateProfile = await this._profileRepository.update(\n//       findUser.profile.id,\n//       params?.profile || {}\n//     );\n\n//     await this._userRepository.update(userId, {\n//       ...params,\n//       profile: updateProfile,\n//     });\n\n//     return;\n//   }\n\n//   async deleteUser(id: string): Promise<void> {\n//     const findUser = await this._userRepository.findById(id);\n\n//     if (!findUser) throw new HttpException(404, \"유저를 찾을 수 없습니다.\");\n\n//     await this._profileRepository.delete(findUser.profile.id);\n\n//     await this._userRepository.delete(id);\n\n//     return;\n//   }\n\n//   async deleteUsers(ids: string[]): Promise<void> {\n//     await Promise.all((ids || []).map((id) => this._userRepository.delete(id)));\n\n//     return;\n//   }\n// }\n"]}