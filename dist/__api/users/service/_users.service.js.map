{"version":3,"file":"_users.service.js","sourceRoot":"","sources":["../../../../src/__api/users/service/_users.service.ts"],"names":[],"mappings":";AAAA,sEAAsE;AACtE,sEAAsE;AACtE,gFAAgF;AAChF,wEAAwE;AACxE,4EAA4E;AAC5E,8EAA8E;AAE9E,SAAS;AACT,yDAAyD;AACzD,qEAAqE;AACrE,uDAAuD;AACvD,0DAA0D;AAE1D,+CAA+C;AAC/C,+CAA+C;AAC/C,wBAAwB;AACxB,aAAa;AAEb,yCAAyC;AACzC,2DAA2D;AAC3D,0DAA0D;AAC1D,SAAS;AAET,sBAAsB;AAEtB,2CAA2C;AAC3C,sBAAsB;AACtB,8BAA8B;AAC9B,0CAA0C;AAC1C,mDAAmD;AACnD,4BAA4B;AAC5B,iBAAiB;AACjB,cAAc;AACd,gCAAgC;AAChC,8CAA8C;AAC9C,eAAe;AACf,MAAM;AACN,oEAAoE;AACpE,4DAA4D;AAE5D,iEAAiE;AAEjE,0DAA0D;AAE1D,0DAA0D;AAE1D,sBAAsB;AACtB,MAAM;AACN,4EAA4E;AAC5E,4DAA4D;AAE5D,wCAAwC;AACxC,MAAM;AACN,0EAA0E;AAC1E,qDAAqD;AAErD,cAAc;AACd,MAAM;AACN,kDAAkD;AAClD,6CAA6C;AAE7C,cAAc;AACd,MAAM;AAEN,sDAAsD;AACtD,mFAAmF;AAEnF,cAAc;AACd,MAAM;AAEN,mDAAmD;AACnD,6CAA6C;AAC7C,sBAAsB;AACtB,SAAS;AACT,IAAI","sourcesContent":["// import HttpException from \"@/api/common/exceptions/http.exception\";\n// import { UserResponseDTO } from \"@/api/users/dto/userResponse.dto\";\n// import { UserRepository } from \"@/api/users/repository/user/user.repository\";\n// import { UserService } from \"@/api/users/service/users.service.type\";\n// import { GetUserResponseDTO } from \"@/api/users/dto/getUserResponse.dto\";\n// import { GetUsersResponseDTO } from \"@/api/users/dto/getUsersResponse.dto\";\n\n// // 레거시\n// export class UsersServiceImpl implements UserService {\n//   constructor(private readonly _userRepository: UserRepository) {}\n//   async getUsers(): Promise<GetUsersResponseDTO[]> {\n//     const users = await this._userRepository.findAll();\n\n//     // const newList = users.map((user) => {\n//     //   const { password, ...rest } = user;\n//     //   return rest;\n//     // });\n\n//     const newList = await Promise.all(\n//       users.map((user) => new GetUsersResponseDTO(user))\n//       // users.map((user) => this._getUserMapDTO(user))\n//     );\n\n//     return newList;\n\n//     // Promise Chaining 방식 (async 안붙여도됌)\n//     // return users\n//     //   .then((users) => {\n//     //     return users.map((user) => {\n//     //       const { password, ...rest } = user;\n//     //       return rest;\n//     //     });\n//     //   })\n//     //   .then((newList) => {\n//     //     return Promise.resolve(newList);\n//     //   });\n//   }\n//   async getUser(id: string): Promise<GetUserResponseDTO | null> {\n//     const user = await this._userRepository.findById(id);\n\n//     if (!user) throw new HttpException(404, \"유저를 찾을 수 없습니다.\");\n\n//     // const dtoUser = await this._getUserMapDTO(user);\n\n//     const dtoUser = await new GetUserResponseDTO(user);\n\n//     return dtoUser;\n//   }\n//   async createUser(params: Omit<IUser, \"id\">): Promise<UserResponseDTO> {\n//     const user = await this._userRepository.save(params);\n\n//     return new UserResponseDTO(user);\n//   }\n//   async updateUser(id: string, params: Partial<IUser>): Promise<void> {\n//     await this._userRepository.update(id, params);\n\n//     return;\n//   }\n//   async deleteUser(id: string): Promise<void> {\n//     await this._userRepository.delete(id);\n\n//     return;\n//   }\n\n//   async deleteUsers(ids: string[]): Promise<void> {\n//     await Promise.all((ids || []).map((id) => this._userRepository.delete(id)));\n\n//     return;\n//   }\n\n//   // private async _getUserMapDTO(user: IUser) {\n//   //   const { password, ...rest } = user;\n//   //   return rest;\n//   // }\n// }\n"]}