{"version":3,"file":"users.controller.js","sourceRoot":"","sources":["../../../../src/__api/users/controller/users.controller.ts"],"names":[],"mappings":";AAAA,UAAU;AACV,mBAAmB;AACnB,yBAAyB;AAEzB,6DAA6D;AAC7D,wEAAwE;AACxE,wEAAwE;AAExE,yCAAyC;AACzC,qDAAqD;AACrD,4CAA4C;AAC5C,uCAAuC;AACvC,wDAAwD;AACxD,MAAM;AAEN,yBAAyB;AACzB,oEAAoE;AACpE,YAAY;AACZ,uCAAuC;AAEvC,kFAAkF;AAElF,0DAA0D;AAC1D,iCAAiC;AACjC,oCAAoC;AACpC,gBAAgB;AAChB,qBAAqB;AACrB,mDAAmD;AACnD,aAAa;AACb,YAAY;AAEZ,wBAAwB;AACxB,wBAAwB;AACxB,4BAA4B;AAC5B,qBAAqB;AACrB,QAAQ;AACR,MAAM;AAEN,4BAA4B;AAC5B,uEAAuE;AACvE,qEAAqE;AAErE,sBAAsB;AACtB,MAAM;AAEN,6BAA6B;AAC7B,0EAA0E;AAC1E,YAAY;AACZ,qCAAqC;AAErC,kEAAkE;AAClE,qBAAqB;AACrB,iCAAiC;AACjC,aAAa;AACb,YAAY;AAEZ,wBAAwB;AACxB,wBAAwB;AACxB,qBAAqB;AACrB,QAAQ;AACR,MAAM;AACN,IAAI","sourcesContent":["// // [유저]\n// // 회원가입 - signUp\n// // 내 정보 조회 - getMyInfo\n\n// import { NextFunction, Request, Response } from \"express\";\n// import { UserService } from \"@/api/users/service/users.service.type\";\n// import { CryptoService } from \"@/api/common/services/crypto.service\";\n\n// export default class UsersController {\n//   constructor(private _userService: UserService) {\n//     this.signUp = this.signUp.bind(this);\n//     this.getMyInfo = this.getMyInfo;\n//     this.updateMyInfo = this.updateMyInfo.bind(this);\n//   }\n\n//   /** 회원가입 (사용자페이지) */\n//   async signUp(req: Request, res: Response, next: NextFunction) {\n//     try {\n//       const { password } = req.body;\n\n//       const { hashedPassword, salt } = CryptoService.encryptPassword(password);\n\n//       const user = await this._userService.createUser({\n//         email: req.body.email,\n//         password: hashedPassword,\n//         salt,\n//         profile: {\n//           firstName: req.body.profile.firstName,\n//         },\n//       });\n\n//       res.send(user);\n//     } catch (error) {\n//       console.log(error);\n//       next(error);\n//     }\n//   }\n\n//   /** 내 정보 조회 (사용자페이지) */\n//   async getMyInfo(req: Request, res: Response, next: NextFunction) {\n//     const user = await this._userService.getUser(req.user.userId);\n\n//     res.send(user);\n//   }\n\n//   /** 내 정보 수정 (사용자 페이지) */\n//   async updateMyInfo(req: Request, res: Response, next: NextFunction) {\n//     try {\n//       const { userId } = req.user;\n\n//       const user = await this._userService.updateUser(userId, {\n//         profile: {\n//           ...req.body.profile,\n//         },\n//       });\n\n//       res.send(user);\n//     } catch (error) {\n//       next(error);\n//     }\n//   }\n// }\n"]}