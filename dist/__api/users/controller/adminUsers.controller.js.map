{"version":3,"file":"adminUsers.controller.js","sourceRoot":"","sources":["../../../../src/__api/users/controller/adminUsers.controller.ts"],"names":[],"mappings":";AAAA,WAAW;AACX,yBAAyB;AACzB,wBAAwB;AACxB,wBAAwB;AACxB,wBAAwB;AACxB,wBAAwB;AAExB,6DAA6D;AAC7D,wEAAwE;AACxE,wEAAwE;AAExE,6CAA6C;AAC7C,qDAAqD;AACrD,gDAAgD;AAChD,8CAA8C;AAC9C,oDAAoD;AACpD,oDAAoD;AACpD,oDAAoD;AACpD,MAAM;AAEN,0BAA0B;AAC1B,oBAAoB;AACpB,oBAAoB;AACpB,sCAAsC;AACtC,+BAA+B;AAC/B,sCAAsC;AACtC,uCAAuC;AACvC,SAAS;AACT,qBAAqB;AACrB,yBAAyB;AACzB,QAAQ;AACR,YAAY;AACZ,0DAA0D;AAC1D,yBAAyB;AACzB,wBAAwB;AACxB,qBAAqB;AACrB,QAAQ;AACR,MAAM;AAEN,0BAA0B;AAC1B,mBAAmB;AACnB,oBAAoB;AACpB,qCAAqC;AACrC,8BAA8B;AAC9B,qCAAqC;AACrC,sCAAsC;AACtC,SAAS;AACT,qBAAqB;AACrB,yBAAyB;AACzB,QAAQ;AACR,YAAY;AACZ,uCAAuC;AAEvC,8DAA8D;AAE9D,wBAAwB;AACxB,wBAAwB;AACxB,qBAAqB;AACrB,QAAQ;AACR,MAAM;AAEN,uBAAuB;AACvB,sBAAsB;AACtB,oBAAoB;AACpB,wCAAwC;AACxC,iCAAiC;AACjC,wCAAwC;AACxC,yCAAyC;AACzC,SAAS;AACT,qBAAqB;AACrB,yBAAyB;AACzB,QAAQ;AACR,YAAY;AACZ,uCAAuC;AAEvC,kFAAkF;AAElF,6DAA6D;AAC7D,uBAAuB;AACvB,oCAAoC;AACpC,gBAAgB;AAChB,YAAY;AACZ,2BAA2B;AAC3B,wBAAwB;AACxB,qBAAqB;AACrB,QAAQ;AACR,MAAM;AAEN,uBAAuB;AACvB,sBAAsB;AACtB,oBAAoB;AACpB,wCAAwC;AACxC,iCAAiC;AACjC,wCAAwC;AACxC,yCAAyC;AACzC,SAAS;AACT,qBAAqB;AACrB,yBAAyB;AACzB,QAAQ;AACR,YAAY;AACZ,yEAAyE;AAEzE,gCAAgC;AAChC,6BAA6B;AAC7B,qBAAqB;AACrB,QAAQ;AACR,MAAM;AAEN,uBAAuB;AACvB,sBAAsB;AACtB,oBAAoB;AACpB,wCAAwC;AACxC,iCAAiC;AACjC,wCAAwC;AACxC,yCAAyC;AACzC,SAAS;AACT,qBAAqB;AACrB,yBAAyB;AACzB,QAAQ;AACR,YAAY;AACZ,uCAAuC;AAEvC,oDAAoD;AACpD,gCAAgC;AAChC,wBAAwB;AACxB,qBAAqB;AACrB,QAAQ;AACR,MAAM;AACN,IAAI","sourcesContent":["// // [관리자]\n// // 유저 목록 조회 - getUsers\n// // 유저 상세 조회 - getUser\n// // 유저 생성 - createUser\n// // 유저 수정 - updateUser\n// // 유저 삭제 - deleteUser\n\n// import { NextFunction, Request, Response } from \"express\";\n// import { UserService } from \"@/api/users/service/users.service.type\";\n// import { CryptoService } from \"@/api/common/services/crypto.service\";\n\n// export default class AdminUserController {\n//   constructor(private _userService: UserService) {\n//     this.getUsers = this.getUsers.bind(this);\n//     this.getUser = this.getUser.bind(this);\n//     this.createUser = this.createUser.bind(this);\n//     this.updateUser = this.updateUser.bind(this);\n//     this.deleteUser = this.deleteUser.bind(this);\n//   }\n\n//   /** 유저 목록 조회 (관리자) */\n//   async getUsers(\n//     req: Request<\n//       adminGetUsersRequest[\"path\"],\n//       adminGetUsersResponse,\n//       adminGetUsersRequest[\"body\"],\n//       adminGetUsersRequest[\"params\"]\n//     >,\n//     res: Response,\n//     next: NextFunction\n//   ) {\n//     try {\n//       const users = await this._userService.getUsers();\n//       res.send(users);\n//     } catch (error) {\n//       next(error);\n//     }\n//   }\n\n//   /** 유저 상세 조회 (관리자) */\n//   async getUser(\n//     req: Request<\n//       adminGetUserRequest[\"path\"],\n//       adminGetUserResponse,\n//       adminGetUserRequest[\"body\"],\n//       adminGetUserRequest[\"params\"]\n//     >,\n//     res: Response,\n//     next: NextFunction\n//   ) {\n//     try {\n//       const { userId } = req.params;\n\n//       const user = await this._userService.getUser(userId);\n\n//       res.send(user);\n//     } catch (error) {\n//       next(error);\n//     }\n//   }\n\n//   /** 유저 생성 (관리자) */\n//   async createUser(\n//     req: Request<\n//       adminCreateUserRequest[\"path\"],\n//       adminCreateUserResponse,\n//       adminCreateUserRequest[\"body\"],\n//       adminCreateUserRequest[\"params\"]\n//     >,\n//     res: Response,\n//     next: NextFunction\n//   ) {\n//     try {\n//       const { password } = req.body;\n\n//       const { hashedPassword, salt } = CryptoService.encryptPassword(password);\n\n//       const newUser = await this._userService.createUser({\n//         ...req.body,\n//         password: hashedPassword,\n//         salt,\n//       });\n//       res.send(newUser);\n//     } catch (error) {\n//       next(error);\n//     }\n//   }\n\n//   /** 유저 수정 (관리자) */\n//   async updateUser(\n//     req: Request<\n//       adminUpdateUserRequest[\"path\"],\n//       adminUpdateUserResponse,\n//       adminUpdateUserRequest[\"body\"],\n//       adminUpdateUserRequest[\"params\"]\n//     >,\n//     res: Response,\n//     next: NextFunction\n//   ) {\n//     try {\n//       await this._userService.updateUser(req.params.userId, req.body);\n\n//       res.status(204).send();\n//     } catch (error: any) {\n//       next(error);\n//     }\n//   }\n\n//   /** 유저 삭제 (관리자) */\n//   async deleteUser(\n//     req: Request<\n//       adminDeleteUserRequest[\"path\"],\n//       adminDeleteUserResponse,\n//       adminDeleteUserRequest[\"body\"],\n//       adminDeleteUserRequest[\"params\"]\n//     >,\n//     res: Response,\n//     next: NextFunction\n//   ) {\n//     try {\n//       const { userId } = req.params;\n\n//       await this._userService.deleteUser(userId);\n//       res.status(204).send();\n//     } catch (error) {\n//       next(error);\n//     }\n//   }\n// }\n"]}