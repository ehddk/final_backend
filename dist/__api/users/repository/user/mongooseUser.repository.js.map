{"version":3,"file":"mongooseUser.repository.js","sourceRoot":"","sources":["../../../../../src/__api/users/repository/user/mongooseUser.repository.ts"],"names":[],"mappings":";AAAA,gFAAgF;AAChF,gEAAgE;AAEhE,kEAAkE;AAClE,0DAA0D;AAC1D,8CAA8C;AAE9C,4BAA4B;AAE5B,sBAAsB;AACtB,MAAM;AACN,wCAAwC;AACxC,oEAAoE;AACpE,qBAAqB;AACrB,MAAM;AAEN,wDAAwD;AACxD,YAAY;AACZ,yDAAyD;AACzD,sBAAsB;AACtB,2BAA2B;AAC3B,wBAAwB;AACxB,8BAA8B;AAC9B,0BAA0B;AAC1B,iCAAiC;AACjC,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb,gCAAgC;AAEhC,yBAAyB;AACzB,6BAA6B;AAC7B,kDAAkD;AAClD,2DAA2D;AAC3D,uBAAuB;AACvB,UAAU;AAEV,qBAAqB;AACrB,QAAQ;AACR,MAAM;AACN,8DAA8D;AAC9D,8DAA8D;AAE9D,+BAA+B;AAC/B,MAAM;AACN,kFAAkF;AAClF,6EAA6E;AAC7E,mBAAmB;AACnB,gBAAgB;AAChB,SAAS;AAET,cAAc;AACd,MAAM;AACN,kDAAkD;AAClD,qDAAqD;AAErD,cAAc;AACd,MAAM;AACN,IAAI","sourcesContent":["// import { UserRepository } from \"@/api/users/repository/user/user.repository\";\n// import { MongooseUser } from \"@/api/users/model/user.schema\";\n\n// export class MongooseUserRepository implements UserRepository {\n//   async save(user: Omit<IUser, \"id\">): Promise<IUser> {\n//     const newUser = new MongooseUser(user);\n\n//     await newUser.save();\n\n//     return newUser;\n//   }\n//   async findAll(): Promise<IUser[]> {\n//     const values = await MongooseUser.find().populate(\"profile\");\n//     return values;\n//   }\n\n//   async findById(id: string): Promise<IUser | null> {\n//     try {\n//       const findUser = await MongooseUser.findById(id)\n//         .populate({\n//           path: \"posts\",\n//           populate: {\n//             path: \"author\",\n//             populate: {\n//               path: \"profile\",\n//             },\n//           },\n//         })\n//         .populate(\"profile\");\n\n//       return findUser;\n//     } catch (error: any) {\n//       const message = error.message.toString();\n//       if (message.includes(\"Cast to ObjectId failed\")) {\n//         return null;\n//       }\n\n//       throw error;\n//     }\n//   }\n//   async findByEmail(email: string): Promise<IUser | null> {\n//     const findUser = await MongooseUser.findOne({ email });\n\n//     return findUser ?? null;\n//   }\n//   async update(userId: string, updateUserInfo: Partial<IUser>): Promise<void> {\n//     await MongooseUser.findByIdAndUpdate(userId, updateUserInfo).populate(\n//       \"profile\",\n//       \"posts\"\n//     );\n\n//     return;\n//   }\n//   async delete(userId: string): Promise<void> {\n//     await MongooseUser.deleteOne({ _id: userId });\n\n//     return;\n//   }\n// }\n"]}