{"version":3,"file":"memoryUser.repository.js","sourceRoot":"","sources":["../../../../../src/__api/users/repository/user/memoryUser.repository.ts"],"names":[],"mappings":";AAAA,sEAAsE;AACtE,uDAAuD;AACvD,gFAAgF;AAEhF,0DAA0D;AAC1D,gEAAgE;AAChE,sBAAsB;AACtB,2DAA2D;AAE3D,8CAA8C;AAC9C,4DAA4D;AAE5D,uBAAuB;AACvB,yDAAyD;AACzD,QAAQ;AAER,iCAAiC;AACjC,iBAAiB;AACjB,oDAAoD;AACpD,sBAAsB;AACtB,UAAU;AAEV,2DAA2D;AAE3D,sBAAsB;AACtB,MAAM;AACN,wCAAwC;AACxC,sEAAsE;AAEtE,qBAAqB;AACrB,MAAM;AAEN,8DAA8D;AAC9D,qEAAqE;AAErE,iEAAiE;AACjE,MAAM;AAEN,wDAAwD;AACxD,2DAA2D;AAE3D,+BAA+B;AAC/B,MAAM;AAEN,kFAAkF;AAClF,+DAA+D;AAE/D,uBAAuB;AACvB,wDAAwD;AACxD,QAAQ;AAER,+CAA+C;AAC/C,qBAAqB;AACrB,2BAA2B;AAC3B,UAAU;AACV,MAAM;AACN,kDAAkD;AAClD,+DAA+D;AAE/D,uBAAuB;AACvB,wDAAwD;AACxD,QAAQ;AAER,iDAAiD;AAEjD,cAAc;AACd,MAAM;AACN,IAAI","sourcesContent":["// import HttpException from \"@/api/common/exceptions/http.exception\";\n// import { User } from \"@/api/users/model/user.model\";\n// import { UserRepository } from \"@/api/users/repository/user/user.repository\";\n\n// // Router -> Controller -> Service (Skip) -> Repository\n// export class MemoryUserRepository implements UserRepository {\n//   static index = 0;\n//   static readonly store: Map<string, IUser> = new Map();\n\n//   async save(user: IUser): Promise<IUser> {\n//     const existUser = await this.findByEmail(user.email);\n\n//     if (existUser) {\n//       throw new HttpException(409, \"이미 존재하는 이메일입니다.\");\n//     }\n\n//     const newUser = new User({\n//       ...user,\n//       id: `user-${MemoryUserRepository.index++}`,\n//       role: \"user\",\n//     });\n\n//     MemoryUserRepository.store.set(newUser.id, newUser);\n\n//     return newUser;\n//   }\n//   async findAll(): Promise<IUser[]> {\n//     const values = Array.from(MemoryUserRepository.store.values());\n\n//     return values;\n//   }\n\n//   async findByEmail(email: string): Promise<IUser | null> {\n//     const users = Array.from(MemoryUserRepository.store.values());\n\n//     return users.find((user) => user.email === email) ?? null;\n//   }\n\n//   async findById(id: string): Promise<IUser | null> {\n//     const findUser = MemoryUserRepository.store.get(id);\n\n//     return findUser ?? null;\n//   }\n\n//   async update(userId: string, updateUserInfo: Partial<IUser>): Promise<void> {\n//     const findUser = MemoryUserRepository.store.get(userId);\n\n//     if (!findUser) {\n//       throw new HttpException(404, \"유저를 찾을 수 없습니다.\");\n//     }\n\n//     MemoryUserRepository.store.set(userId, {\n//       ...findUser,\n//       ...updateUserInfo,\n//     });\n//   }\n//   async delete(userId: string): Promise<void> {\n//     const findUser = MemoryUserRepository.store.get(userId);\n\n//     if (!findUser) {\n//       throw new HttpException(404, \"유저를 찾을 수 없습니다.\");\n//     }\n\n//     MemoryUserRepository.store.delete(userId);\n\n//     return;\n//   }\n// }\n"]}