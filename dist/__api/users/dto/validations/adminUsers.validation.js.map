{"version":3,"file":"adminUsers.validation.js","sourceRoot":"","sources":["../../../../../src/__api/users/dto/validations/adminUsers.validation.ts"],"names":[],"mappings":";AAAA,oDAAoD;AACpD,8BAA8B;AAE9B,0EAA0E;AAC1E,uEAAuE;AACvE,yBAAyB;AACzB,gGAAgG;AAEhG,iCAAiC;AACjC,iDAAiD;AACjD,iBAAiB;AACjB,gBAAgB;AAChB,gBAAgB;AAChB,eAAe;AACf,gBAAgB;AAChB,kBAAkB;AAClB,qBAAqB;AACrB,sBAAsB;AACtB,SAAS;AACT,mBAAmB;AACnB,mEAAmE;AACnE,gDAAgD;AAChD,+CAA+C;AAC/C,kBAAkB;AAClB,QAAQ;AACR,MAAM;AAEN,+CAA+C;AAC/C,eAAe;AACf,gBAAgB;AAChB,mCAAmC;AACnC,mDAAmD;AACnD,oDAAoD;AACpD,kBAAkB;AAClB,gBAAgB;AAChB,mBAAmB;AACnB,2BAA2B;AAC3B,4EAA4E;AAC5E,WAAW;AACX,mBAAmB;AACnB,0BAA0B;AAC1B,iBAAiB;AACjB,kBAAkB;AAClB,+DAA+D;AAC/D,qBAAqB;AACrB,kBAAkB;AAClB,kBAAkB;AAClB,0DAA0D;AAC1D,qBAAqB;AACrB,0DAA0D;AAC1D,yCAAyC;AACzC,0CAA0C;AAC1C,oCAAoC;AACpC,QAAQ;AACR,MAAM;AAEN,uCAAuC;AACvC,mCAAmC;AACnC,KAAK;AAEL,+CAA+C;AAC/C,oEAAoE;AACpE,oDAAoD;AACpD,kBAAkB;AAClB,gBAAgB;AAChB,gBAAgB;AAChB,wBAAwB;AACxB,yEAAyE;AACzE,QAAQ;AACR,mBAAmB;AACnB,0BAA0B;AAC1B,wBAAwB;AACxB,iBAAiB;AACjB,kBAAkB;AAClB,+DAA+D;AAC/D,qBAAqB;AACrB,kBAAkB;AAClB,kBAAkB;AAClB,0DAA0D;AAC1D,qBAAqB;AACrB,+BAA+B;AAC/B,yCAAyC;AACzC,0CAA0C;AAC1C,oCAAoC;AACpC,QAAQ;AACR,MAAM;AAEN,+CAA+C;AAC/C,gBAAgB;AAChB,gBAAgB;AAChB,iEAAiE;AACjE,MAAM;AAEN,uCAAuC;AACvC,mCAAmC;AACnC,qCAAqC;AACrC,KAAK","sourcesContent":["// import { REGEX } from \"@/api/common/validations\";\n// import * as yup from \"yup\";\n\n// const EMAIL_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n// // 비밀번호 8~16자 이상이고 영문 숫자 포함 하고 대문자 1개는 꼭 들어가있어야하고, 특수문자도 1개 들어가있어야해.\n// const PASSWORD_REGEX =\n//   /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*(),.?\":{}|<>])[A-Za-z\\d!@#$%^&*(),.?\":{}|<>]{8,16}$/;\n\n// // 조건부 검증을 할때는 when을 사용하면 됩니다.\n// const withDrawUserBodyValidator = yup.object({\n//   /** 탈퇴 사유 */\n//   reason: yup\n//     .string()\n//     .oneOf([\n//       \"불편해요\",\n//       \"불만족이에요\",\n//       \"더이상 사용안해요\",\n//       \"기타 (직접 입력)\",\n//     ])\n//     .required(),\n//   extraReason: yup.string().when(\"reason\", (reason, schema) => {\n//     return reason.toString() === \"기타 (직접 입력)\"\n//       ? schema.required(\"기타 사유는 필수 입력값입니다.\")\n//       : schema;\n//   }),\n// });\n\n// const createUserBodyValidator = yup.object({\n//   email: yup\n//     .string()\n//     .required(\"이메일은 필수 입력값입니다.\")\n//     .matches(EMAIL_REGEX, \"이메일 형식이 올바르지 않습니다.\"),\n//   // .matches(REGEX.EMAIL, \"이메일 형식이 올바르지 않습니다.\"),\n//   password: yup\n//     .string()\n//     // .matches(\n//     //   PASSWORD_REGEX,\n//     //   \"비밀번호는 8~16자 이상이고, 대문자 1개 이상 그리고 영문 숫자 포함하고, 특수문자는 1개 이상이어야합니다.\"\n//     // )\n//     .optional(),\n//   profile: yup.object({\n//     birth: yup\n//       .string()\n//       .matches(/^\\d{4}-\\d{2}-\\d{2}$/, \"생년월일 형식이 올바르지 않습니다.\")\n//       .optional(),\n//     gender: yup\n//       .string()\n//       .oneOf([\"M\", \"F\"], \"성별은 남자는 M 여자는 F로 입력되어야 합니다.\")\n//       .optional(),\n//     firstName: yup.string().required(\"이름은 필수 입력값입니다.\"),\n//     lastName: yup.string().optional(),\n//     thubmnail: yup.string().optional(),\n//     bio: yup.string().optional(),\n//   }),\n// });\n\n// export const createUserValidator = {\n//   body: createUserBodyValidator,\n// };\n\n// const updateUserBodyValidator = yup.object({\n//   email: yup.string().matches(EMAIL_REGEX, \"이메일 형식이 올바르지 않습니다.\"),\n//   // .matches(REGEX.EMAIL, \"이메일 형식이 올바르지 않습니다.\"),\n//   password: yup\n//     .string()\n//     .matches(\n//       PASSWORD_REGEX,\n//       \"비밀번호는 8~16자 이상이고, 대문자 1개 이상 그리고 영문 숫자 포함하고, 특수문자는 1개 이상이어야합니다.\"\n//     )\n//     .optional(),\n//   profile: yup.object({\n//     id: yup.string(),\n//     birth: yup\n//       .string()\n//       .matches(/^\\d{4}-\\d{2}-\\d{2}$/, \"생년월일 형식이 올바르지 않습니다.\")\n//       .optional(),\n//     gender: yup\n//       .string()\n//       .oneOf([\"M\", \"F\"], \"성별은 남자는 M 여자는 F로 입력되어야 합니다.\")\n//       .optional(),\n//     firstName: yup.string(),\n//     lastName: yup.string().optional(),\n//     thubmnail: yup.string().optional(),\n//     bio: yup.string().optional(),\n//   }),\n// });\n\n// const updateUserPathValidator = yup.object({\n//   userId: yup\n//     .string()\n//     .matches(REGEX.EMPTY_VARIABLE_PATH, \"userId는 필수 입력값입니다.\"),\n// });\n\n// export const updateUserValidator = {\n//   body: updateUserBodyValidator,\n//   params: updateUserPathValidator,\n// };\n"]}